package edu.umn.msi.tropix.storage.cagrid.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import edu.umn.msi.tropix.storage.cagrid.stubs.TropixStoragePortType;
import edu.umn.msi.tropix.storage.cagrid.stubs.service.TropixStorageServiceAddressingLocator;
import edu.umn.msi.tropix.storage.cagrid.common.TropixStorageI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
@SuppressWarnings("all") public class TropixStorageClient extends TropixStorageClientBase implements TropixStorageI {	

	public TropixStorageClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public TropixStorageClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public TropixStorageClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public TropixStorageClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(TropixStorageClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  TropixStorageClient client = new TropixStorageClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public boolean delete(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    edu.umn.msi.tropix.storage.cagrid.stubs.DeleteRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.DeleteRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.DeleteResponse boxedResult = portType.delete(params);
    return boxedResult.isResponse();
    }
  }

  public boolean exists(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"exists");
    edu.umn.msi.tropix.storage.cagrid.stubs.ExistsRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.ExistsRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.ExistsResponse boxedResult = portType.exists(params);
    return boxedResult.isResponse();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference prepareDownload(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"prepareDownload");
    edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadResponse boxedResult = portType.prepareDownload(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference prepareUpload(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"prepareUpload");
    edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadResponse boxedResult = portType.prepareUpload(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public boolean canDownload(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"canDownload");
    edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadResponse boxedResult = portType.canDownload(params);
    return boxedResult.isResponse();
    }
  }

  public boolean canUpload(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"canUpload");
    edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadResponse boxedResult = portType.canUpload(params);
    return boxedResult.isResponse();
    }
  }

  public boolean canDelete(java.lang.String arg1) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"canDelete");
    edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteRequest params = new edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteRequest();
    params.setArg1(arg1);
    edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteResponse boxedResult = portType.canDelete(params);
    return boxedResult.isResponse();
    }
  }

}
