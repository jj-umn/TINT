/********************************************************************************
 * Copyright (c) 2009 Regents of the University of Minnesota
 *
 * This Software was written at the Minnesota Supercomputing Institute
 * http://msi.umn.edu
 *
 * All rights reserved. The following statement of license applies
 * only to this file, and and not to the other files distributed with it
 * or derived therefrom.  This file is made available under the terms of
 * the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Minnesota Supercomputing Institute - initial API and implementation
 *******************************************************************************/

package edu.umn.msi.tropix.proteomics.mascot;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;

public class MascotMIMEWriter {
  public static final String DEFAULT_BOUNDARY = "gI3780Zo098mn28dksKSJ283784MN4nskSD87983010mdJKH";
  private static final int BUFFER_SIZE = 2048;
  private final String boundary;
  private final Writer writer;

  public MascotMIMEWriter(final Writer writer, final String boundary) throws IOException {
    this.boundary = boundary;
    this.writer = writer;

    // Mascot chokes when given MIME content with a header

    // FATAL_ERROR: M00259
    // Uploaded file () is a binary file? Mascot only takes text files [M00259]<BR>

    // write("MIME-Version: 1.0 (Generated by Tropix)\n");
    // write("Content-Type: multipart/mixed; boundary=");
    // write(boundary);
    // write("\n\n");
    writeBoundary();
  }

  /*
   * public MascotMIMEWriter(Writer writer) throws IOException { this(writer, DEFAULT_BOUNDARY); }
   */

  public void close() throws IOException {
    write("--");
    writer.flush();
    writer.close();
  }

  private void writeBoundary() throws IOException {
    write("--");
    write(boundary);
  }

  private void write(final Object obj) throws IOException {
    writer.write(obj.toString());
  }

  /*
   * public void writeFile(String fileName, File file) throws IOException { writeFile(fileName, new FileReader(file)); }
   * 
   * public void writeFile(String fileName, String filePath) throws IOException { writeFile(fileName, new File(filePath)); }
   */

  public void writeFile(final String fileName, final byte[] contents) throws IOException {
    writeFile(fileName, new StringReader(new String(contents)));
  }

  public void writeFile(final String fileName, final Reader contents) throws IOException {
    write("\nContent–Disposition: form–data; name=\"FILE\"; filename=\"");
    write(fileName);
    write("\"\n\n");
    final char[] buffer = new char[BUFFER_SIZE];
    int charsRead;
    while(true) {
      charsRead = contents.read(buffer);
      if(charsRead == -1) {
        break;
      }
      writer.write(buffer, 0, charsRead);
    }
    write("\n");
    writeBoundary();
  }

  public void write(final String name, final Object value) throws IOException {
    write("\nContent–Disposition: form–data; name=\"");
    write(name);
    write("\"\n\n");
    write(value);
    write("\n");
    writeBoundary();
  }
}
