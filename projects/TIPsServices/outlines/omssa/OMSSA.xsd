<?xml version="1.0" ?>
<!-- ============================================
     ::DATATOOL:: Generated from "/net/napc02/vol/pubchem/Users/lewisg/checkin/c++/src/objects/omssa/omssa.asn"
     ::DATATOOL:: by application DATATOOL version 1.9.2
     ::DATATOOL:: on 10/09/2008 17:01:17
     ============================================ -->

<xs:schema
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:ncbi="http://www.ncbi.nlm.nih.gov"
  xmlns="http://www.ncbi.nlm.nih.gov"
  targetNamespace="http://www.ncbi.nlm.nih.gov"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified">

<!-- ============================================ -->
<!-- This section is mapped from module "OMSSA"
================================================= -->
<!--
 $Id: omssa.asn 136925 2008-08-08 16:17:07Z lewisg $
**********************************************************************

  OMSSA (Open Mass Spectrometry Search Algorithm) data definitions
  Lewis Geer, 2003

  make using something like
  "datatool -m omssa.asn -oc ObjOmssa -oA -od omssa.def"

  note that this file requires omssa.def

**********************************************************************
-->
<!-- Elements referenced from other modules:
          Bioseq FROM NCBI-Sequence -->

<!-- ============================================ -->



<!-- Generic holder for experimental info -->
<xs:element name="NameValue">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="NameValue_name" type="xs:string"/>
      <xs:element name="NameValue_value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Holds a single spectrum -->
<xs:element name="MSSpectrum">
  <xs:complexType>
    <xs:sequence>
<!-- unique number of spectrum -->
      <xs:element name="MSSpectrum_number" type="xs:integer"/>
<!-- may be more than one if unknown -->
      <xs:element name="MSSpectrum_charge">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSSpectrum_charge_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- scaled precursor m/z, scale is in MSSearchSettings -->
      <xs:element name="MSSpectrum_precursormz" type="xs:integer"/>
<!-- scaled product m/z -->
      <xs:element name="MSSpectrum_mz">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSSpectrum_mz_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- scaled product abundance -->
      <xs:element name="MSSpectrum_abundance">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSSpectrum_abundance_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- abundance scale, float to integer -->
      <xs:element name="MSSpectrum_iscale" type="xs:double"/>
<!-- ids/filenames -->
      <xs:element name="MSSpectrum_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSSpectrum_ids_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- extra info: retention times, etc. -->
      <xs:element name="MSSpectrum_namevalue" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="NameValue"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Holds a set of spectra -->
<xs:element name="MSSpectrumset">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="MSSpectrum"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- enumerate enzymes -->
<xs:element name="MSEnzymes">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="trypsin" ncbi:intvalue="0"/>
              <xs:enumeration value="argc" ncbi:intvalue="1"/>
              <xs:enumeration value="cnbr" ncbi:intvalue="2"/>
              <xs:enumeration value="chymotrypsin" ncbi:intvalue="3"/>
              <xs:enumeration value="formicacid" ncbi:intvalue="4"/>
              <xs:enumeration value="lysc" ncbi:intvalue="5"/>
              <xs:enumeration value="lysc-p" ncbi:intvalue="6"/>
              <xs:enumeration value="pepsin-a" ncbi:intvalue="7"/>
              <xs:enumeration value="tryp-cnbr" ncbi:intvalue="8"/>
              <xs:enumeration value="tryp-chymo" ncbi:intvalue="9"/>
              <xs:enumeration value="trypsin-p" ncbi:intvalue="10"/>
              <xs:enumeration value="whole-protein" ncbi:intvalue="11"/>
              <xs:enumeration value="aspn" ncbi:intvalue="12"/>
              <xs:enumeration value="gluc" ncbi:intvalue="13"/>
              <xs:enumeration value="aspngluc" ncbi:intvalue="14"/>
              <xs:enumeration value="top-down" ncbi:intvalue="15"/>
              <xs:enumeration value="semi-tryptic" ncbi:intvalue="16"/>
              <xs:enumeration value="no-enzyme" ncbi:intvalue="17"/>
              <xs:enumeration value="chymotrypsin-p" ncbi:intvalue="18"/>
              <xs:enumeration value="aspn-de" ncbi:intvalue="19"/>
              <xs:enumeration value="gluc-de" ncbi:intvalue="20"/>
              <xs:enumeration value="max" ncbi:intvalue="21"/>
              <xs:enumeration value="none" ncbi:intvalue="255"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- enumerate modifications -->
<xs:element name="MSMod">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    methylk	-  methylation of K
    oxym	-  oxidation of methionine
    carboxymethylc	-  carboxymethyl cysteine
    carbamidomethylc	-  carbamidomethyl cysteine
    deamidationkq	-  deamidation of K and Q
    propionamidec	-  propionamide cysteine
    phosphorylations	-  phosphorylation of S
    phosphorylationt	-  phosphorylation of T
    phosphorylationy	-  phosphorylation of Y    
    ntermmcleave	-  N terminal methionine cleavage
    ntermacetyl	-  N terminal protein acetyl
    ntermmethyl	-  N terminal protein methyl
    ntermtrimethyl	-  N terminal protein trimethyl
    methythiold	-  beta methythiolation of D
    methylq	-  methylation of Q
    trimethylk	-  trimethylation of K
    methyld	-  methylation of D
    methyle	-  methylation of E
    ctermpepmethyl	-  C terminal methylation
    trideuteromethyld	-  trideuteromethylation of D
    trideuteromethyle	-  trideuteromethylation of E
    ctermpeptrideuteromethyl	-  C terminal trideuteromethylation
    usermod1	-  start of user defined mods
    usermod10	-  end of user defined mods
    max	-  maximum number of mods
    unknown	-  modification of unknown type
-->
              <xs:enumeration value="methylk" ncbi:intvalue="0"/>
              <xs:enumeration value="oxym" ncbi:intvalue="1"/>
              <xs:enumeration value="carboxymethylc" ncbi:intvalue="2"/>
              <xs:enumeration value="carbamidomethylc" ncbi:intvalue="3"/>
              <xs:enumeration value="deamidationkq" ncbi:intvalue="4"/>
              <xs:enumeration value="propionamidec" ncbi:intvalue="5"/>
              <xs:enumeration value="phosphorylations" ncbi:intvalue="6"/>
              <xs:enumeration value="phosphorylationt" ncbi:intvalue="7"/>
              <xs:enumeration value="phosphorylationy" ncbi:intvalue="8"/>
              <xs:enumeration value="ntermmcleave" ncbi:intvalue="9"/>
              <xs:enumeration value="ntermacetyl" ncbi:intvalue="10"/>
              <xs:enumeration value="ntermmethyl" ncbi:intvalue="11"/>
              <xs:enumeration value="ntermtrimethyl" ncbi:intvalue="12"/>
              <xs:enumeration value="methythiold" ncbi:intvalue="13"/>
              <xs:enumeration value="methylq" ncbi:intvalue="14"/>
              <xs:enumeration value="trimethylk" ncbi:intvalue="15"/>
              <xs:enumeration value="methyld" ncbi:intvalue="16"/>
              <xs:enumeration value="methyle" ncbi:intvalue="17"/>
              <xs:enumeration value="ctermpepmethyl" ncbi:intvalue="18"/>
              <xs:enumeration value="trideuteromethyld" ncbi:intvalue="19"/>
              <xs:enumeration value="trideuteromethyle" ncbi:intvalue="20"/>
              <xs:enumeration value="ctermpeptrideuteromethyl" ncbi:intvalue="21"/>
              <xs:enumeration value="nformylmet" ncbi:intvalue="22"/>
              <xs:enumeration value="twoamino3oxobutanoicacid" ncbi:intvalue="23"/>
              <xs:enumeration value="acetylk" ncbi:intvalue="24"/>
              <xs:enumeration value="ctermamide" ncbi:intvalue="25"/>
              <xs:enumeration value="bmethylthiold" ncbi:intvalue="26"/>
              <xs:enumeration value="carbamidomethylk" ncbi:intvalue="27"/>
              <xs:enumeration value="carbamidometylh" ncbi:intvalue="28"/>
              <xs:enumeration value="carbamidomethyld" ncbi:intvalue="29"/>
              <xs:enumeration value="carbamidomethyle" ncbi:intvalue="30"/>
              <xs:enumeration value="carbamylk" ncbi:intvalue="31"/>
              <xs:enumeration value="ntermcarbamyl" ncbi:intvalue="32"/>
              <xs:enumeration value="citrullinationr" ncbi:intvalue="33"/>
              <xs:enumeration value="cysteicacidc" ncbi:intvalue="34"/>
              <xs:enumeration value="diiodinationy" ncbi:intvalue="35"/>
              <xs:enumeration value="dimethylk" ncbi:intvalue="36"/>
              <xs:enumeration value="dimethylr" ncbi:intvalue="37"/>
              <xs:enumeration value="ntermpepdimethyl" ncbi:intvalue="38"/>
              <xs:enumeration value="dihydroxyf" ncbi:intvalue="39"/>
              <xs:enumeration value="thioacetylk" ncbi:intvalue="40"/>
              <xs:enumeration value="ntermpeptioacetyl" ncbi:intvalue="41"/>
              <xs:enumeration value="farnesylationc" ncbi:intvalue="42"/>
              <xs:enumeration value="formylk" ncbi:intvalue="43"/>
              <xs:enumeration value="ntermpepformyl" ncbi:intvalue="44"/>
              <xs:enumeration value="formylkynureninw" ncbi:intvalue="45"/>
              <xs:enumeration value="phef" ncbi:intvalue="46"/>
              <xs:enumeration value="gammacarboxyld" ncbi:intvalue="47"/>
              <xs:enumeration value="gammacarboxyle" ncbi:intvalue="48"/>
              <xs:enumeration value="geranylgeranylc" ncbi:intvalue="49"/>
              <xs:enumeration value="ntermpepglucuronylg" ncbi:intvalue="50"/>
              <xs:enumeration value="glutathionec" ncbi:intvalue="51"/>
              <xs:enumeration value="glyglyk" ncbi:intvalue="52"/>
              <xs:enumeration value="guanidinationk" ncbi:intvalue="53"/>
              <xs:enumeration value="his2asnh" ncbi:intvalue="54"/>
              <xs:enumeration value="his2asph" ncbi:intvalue="55"/>
              <xs:enumeration value="ctermpephsem" ncbi:intvalue="56"/>
              <xs:enumeration value="ctermpephselactm" ncbi:intvalue="57"/>
              <xs:enumeration value="hydroxykynureninw" ncbi:intvalue="58"/>
              <xs:enumeration value="hydroxylationd" ncbi:intvalue="59"/>
              <xs:enumeration value="hydroxylationk" ncbi:intvalue="60"/>
              <xs:enumeration value="hydroxylationn" ncbi:intvalue="61"/>
              <xs:enumeration value="hydroxylationp" ncbi:intvalue="62"/>
              <xs:enumeration value="hydroxylationf" ncbi:intvalue="63"/>
              <xs:enumeration value="hydroxylationy" ncbi:intvalue="64"/>
              <xs:enumeration value="iodinationy" ncbi:intvalue="65"/>
              <xs:enumeration value="kynureninw" ncbi:intvalue="66"/>
              <xs:enumeration value="lipoylk" ncbi:intvalue="67"/>
              <xs:enumeration value="ctermpepmeester" ncbi:intvalue="68"/>
              <xs:enumeration value="meesterd" ncbi:intvalue="69"/>
              <xs:enumeration value="meestere" ncbi:intvalue="70"/>
              <xs:enumeration value="meesters" ncbi:intvalue="71"/>
              <xs:enumeration value="meestery" ncbi:intvalue="72"/>
              <xs:enumeration value="methylc" ncbi:intvalue="73"/>
              <xs:enumeration value="methylh" ncbi:intvalue="74"/>
              <xs:enumeration value="methyln" ncbi:intvalue="75"/>
              <xs:enumeration value="ntermpepmethyl" ncbi:intvalue="76"/>
              <xs:enumeration value="methylr" ncbi:intvalue="77"/>
              <xs:enumeration value="ntermpepmyristoyeylationg" ncbi:intvalue="78"/>
              <xs:enumeration value="ntermpepmyristoyl4hg" ncbi:intvalue="79"/>
              <xs:enumeration value="ntermpepmyristoylationg" ncbi:intvalue="80"/>
              <xs:enumeration value="myristoylationk" ncbi:intvalue="81"/>
              <xs:enumeration value="ntermformyl" ncbi:intvalue="82"/>
              <xs:enumeration value="nemc" ncbi:intvalue="83"/>
              <xs:enumeration value="nipcam" ncbi:intvalue="84"/>
              <xs:enumeration value="nitrow" ncbi:intvalue="85"/>
              <xs:enumeration value="nitroy" ncbi:intvalue="86"/>
              <xs:enumeration value="ctermpepo18" ncbi:intvalue="87"/>
              <xs:enumeration value="ctermpepdio18" ncbi:intvalue="88"/>
              <xs:enumeration value="oxyh" ncbi:intvalue="89"/>
              <xs:enumeration value="oxyw" ncbi:intvalue="90"/>
              <xs:enumeration value="ppantetheines" ncbi:intvalue="91"/>
              <xs:enumeration value="palmitoylationc" ncbi:intvalue="92"/>
              <xs:enumeration value="palmitoylationk" ncbi:intvalue="93"/>
              <xs:enumeration value="palmitoylations" ncbi:intvalue="94"/>
              <xs:enumeration value="palmitoylationt" ncbi:intvalue="95"/>
              <xs:enumeration value="phospholosss" ncbi:intvalue="96"/>
              <xs:enumeration value="phospholosst" ncbi:intvalue="97"/>
              <xs:enumeration value="phospholossy" ncbi:intvalue="98"/>
              <xs:enumeration value="phosphoneutrallossc" ncbi:intvalue="99"/>
              <xs:enumeration value="phosphoneutrallossd" ncbi:intvalue="100"/>
              <xs:enumeration value="phosphoneutrallossh" ncbi:intvalue="101"/>
              <xs:enumeration value="propionylk" ncbi:intvalue="102"/>
              <xs:enumeration value="ntermpeppropionyl" ncbi:intvalue="103"/>
              <xs:enumeration value="propionylheavyk" ncbi:intvalue="104"/>
              <xs:enumeration value="ntermpeppropionylheavy" ncbi:intvalue="105"/>
              <xs:enumeration value="pyridylk" ncbi:intvalue="106"/>
              <xs:enumeration value="ntermpeppyridyl" ncbi:intvalue="107"/>
              <xs:enumeration value="ntermpeppyrocmc" ncbi:intvalue="108"/>
              <xs:enumeration value="ntermpeppyroe" ncbi:intvalue="109"/>
              <xs:enumeration value="ntermpeppyroq" ncbi:intvalue="110"/>
              <xs:enumeration value="pyroglutamicp" ncbi:intvalue="111"/>
              <xs:enumeration value="spyridylethylc" ncbi:intvalue="112"/>
              <xs:enumeration value="semetm" ncbi:intvalue="113"/>
              <xs:enumeration value="sulfationy" ncbi:intvalue="114"/>
              <xs:enumeration value="suphonem" ncbi:intvalue="115"/>
              <xs:enumeration value="triiodinationy" ncbi:intvalue="116"/>
              <xs:enumeration value="trimethylationr" ncbi:intvalue="117"/>
              <xs:enumeration value="ntermpeptripalmitatec" ncbi:intvalue="118"/>
              <xs:enumeration value="usermod1" ncbi:intvalue="119"/>
              <xs:enumeration value="usermod2" ncbi:intvalue="120"/>
              <xs:enumeration value="usermod3" ncbi:intvalue="121"/>
              <xs:enumeration value="usermod4" ncbi:intvalue="122"/>
              <xs:enumeration value="usermod5" ncbi:intvalue="123"/>
              <xs:enumeration value="usermod6" ncbi:intvalue="124"/>
              <xs:enumeration value="usermod7" ncbi:intvalue="125"/>
              <xs:enumeration value="usermod8" ncbi:intvalue="126"/>
              <xs:enumeration value="usermod9" ncbi:intvalue="127"/>
              <xs:enumeration value="usermod10" ncbi:intvalue="128"/>
              <xs:enumeration value="icatlight" ncbi:intvalue="129"/>
              <xs:enumeration value="icatheavy" ncbi:intvalue="130"/>
              <xs:enumeration value="camthiopropanoylk" ncbi:intvalue="131"/>
              <xs:enumeration value="phosphoneutrallosss" ncbi:intvalue="132"/>
              <xs:enumeration value="phosphoneutrallosst" ncbi:intvalue="133"/>
              <xs:enumeration value="phosphoetdlosss" ncbi:intvalue="134"/>
              <xs:enumeration value="phosphoetdlosst" ncbi:intvalue="135"/>
              <xs:enumeration value="arg-13c6" ncbi:intvalue="136"/>
              <xs:enumeration value="arg-13c6-15n4" ncbi:intvalue="137"/>
              <xs:enumeration value="lys-13c6" ncbi:intvalue="138"/>
              <xs:enumeration value="oxy18" ncbi:intvalue="139"/>
              <xs:enumeration value="beta-elim-s" ncbi:intvalue="140"/>
              <xs:enumeration value="beta-elim-t" ncbi:intvalue="141"/>
              <xs:enumeration value="usermod11" ncbi:intvalue="142"/>
              <xs:enumeration value="usermod12" ncbi:intvalue="143"/>
              <xs:enumeration value="usermod13" ncbi:intvalue="144"/>
              <xs:enumeration value="usermod14" ncbi:intvalue="145"/>
              <xs:enumeration value="usermod15" ncbi:intvalue="146"/>
              <xs:enumeration value="usermod16" ncbi:intvalue="147"/>
              <xs:enumeration value="usermod17" ncbi:intvalue="148"/>
              <xs:enumeration value="usermod18" ncbi:intvalue="149"/>
              <xs:enumeration value="usermod19" ncbi:intvalue="150"/>
              <xs:enumeration value="usermod20" ncbi:intvalue="151"/>
              <xs:enumeration value="usermod21" ncbi:intvalue="152"/>
              <xs:enumeration value="usermod22" ncbi:intvalue="153"/>
              <xs:enumeration value="usermod23" ncbi:intvalue="154"/>
              <xs:enumeration value="usermod24" ncbi:intvalue="155"/>
              <xs:enumeration value="usermod25" ncbi:intvalue="156"/>
              <xs:enumeration value="usermod26" ncbi:intvalue="157"/>
              <xs:enumeration value="usermod27" ncbi:intvalue="158"/>
              <xs:enumeration value="usermod28" ncbi:intvalue="159"/>
              <xs:enumeration value="usermod29" ncbi:intvalue="160"/>
              <xs:enumeration value="usermod30" ncbi:intvalue="161"/>
              <xs:enumeration value="sulfinicacid" ncbi:intvalue="162"/>
              <xs:enumeration value="arg2orn" ncbi:intvalue="163"/>
              <xs:enumeration value="dehydro" ncbi:intvalue="164"/>
              <xs:enumeration value="carboxykynurenin" ncbi:intvalue="165"/>
              <xs:enumeration value="sumoylation" ncbi:intvalue="166"/>
              <xs:enumeration value="iTRAQ114nterm" ncbi:intvalue="167"/>
              <xs:enumeration value="iTRAQ114K" ncbi:intvalue="168"/>
              <xs:enumeration value="iTRAQ114Y" ncbi:intvalue="169"/>
              <xs:enumeration value="iTRAQ115nterm" ncbi:intvalue="170"/>
              <xs:enumeration value="iTRAQ115K" ncbi:intvalue="171"/>
              <xs:enumeration value="iTRAQ115Y" ncbi:intvalue="172"/>
              <xs:enumeration value="iTRAQ116nterm" ncbi:intvalue="173"/>
              <xs:enumeration value="iTRAQ116K" ncbi:intvalue="174"/>
              <xs:enumeration value="iTRAQ116Y" ncbi:intvalue="175"/>
              <xs:enumeration value="iTRAQ117nterm" ncbi:intvalue="176"/>
              <xs:enumeration value="iTRAQ117K" ncbi:intvalue="177"/>
              <xs:enumeration value="iTRAQ117Y" ncbi:intvalue="178"/>
              <xs:enumeration value="mmts" ncbi:intvalue="179"/>
              <xs:enumeration value="lys-2H4" ncbi:intvalue="180"/>
              <xs:enumeration value="lys-13C615N2" ncbi:intvalue="181"/>
              <xs:enumeration value="hexNAcN" ncbi:intvalue="182"/>
              <xs:enumeration value="dHexHexNAcN" ncbi:intvalue="183"/>
              <xs:enumeration value="hexNAcS" ncbi:intvalue="184"/>
              <xs:enumeration value="hexNAcT" ncbi:intvalue="185"/>
              <xs:enumeration value="mod186" ncbi:intvalue="186"/>
              <xs:enumeration value="mod187" ncbi:intvalue="187"/>
              <xs:enumeration value="mod188" ncbi:intvalue="188"/>
              <xs:enumeration value="mod189" ncbi:intvalue="189"/>
              <xs:enumeration value="mod190" ncbi:intvalue="190"/>
              <xs:enumeration value="mod191" ncbi:intvalue="191"/>
              <xs:enumeration value="mod192" ncbi:intvalue="192"/>
              <xs:enumeration value="mod193" ncbi:intvalue="193"/>
              <xs:enumeration value="mod194" ncbi:intvalue="194"/>
              <xs:enumeration value="mod195" ncbi:intvalue="195"/>
              <xs:enumeration value="mod196" ncbi:intvalue="196"/>
              <xs:enumeration value="mod197" ncbi:intvalue="197"/>
              <xs:enumeration value="mod198" ncbi:intvalue="198"/>
              <xs:enumeration value="mod199" ncbi:intvalue="199"/>
              <xs:enumeration value="mod200" ncbi:intvalue="200"/>
              <xs:enumeration value="mod201" ncbi:intvalue="201"/>
              <xs:enumeration value="mod202" ncbi:intvalue="202"/>
              <xs:enumeration value="mod203" ncbi:intvalue="203"/>
              <xs:enumeration value="mod204" ncbi:intvalue="204"/>
              <xs:enumeration value="mod205" ncbi:intvalue="205"/>
              <xs:enumeration value="mod206" ncbi:intvalue="206"/>
              <xs:enumeration value="mod207" ncbi:intvalue="207"/>
              <xs:enumeration value="mod208" ncbi:intvalue="208"/>
              <xs:enumeration value="mod209" ncbi:intvalue="209"/>
              <xs:enumeration value="mod210" ncbi:intvalue="210"/>
              <xs:enumeration value="mod211" ncbi:intvalue="211"/>
              <xs:enumeration value="mod212" ncbi:intvalue="212"/>
              <xs:enumeration value="mod213" ncbi:intvalue="213"/>
              <xs:enumeration value="mod214" ncbi:intvalue="214"/>
              <xs:enumeration value="mod215" ncbi:intvalue="215"/>
              <xs:enumeration value="mod216" ncbi:intvalue="216"/>
              <xs:enumeration value="mod217" ncbi:intvalue="217"/>
              <xs:enumeration value="mod218" ncbi:intvalue="218"/>
              <xs:enumeration value="mod219" ncbi:intvalue="219"/>
              <xs:enumeration value="mod220" ncbi:intvalue="220"/>
              <xs:enumeration value="mod221" ncbi:intvalue="221"/>
              <xs:enumeration value="mod222" ncbi:intvalue="222"/>
              <xs:enumeration value="mod223" ncbi:intvalue="223"/>
              <xs:enumeration value="mod224" ncbi:intvalue="224"/>
              <xs:enumeration value="mod225" ncbi:intvalue="225"/>
              <xs:enumeration value="mod226" ncbi:intvalue="226"/>
              <xs:enumeration value="mod227" ncbi:intvalue="227"/>
              <xs:enumeration value="mod228" ncbi:intvalue="228"/>
              <xs:enumeration value="mod229" ncbi:intvalue="229"/>
              <xs:enumeration value="mod230" ncbi:intvalue="230"/>
              <xs:enumeration value="max" ncbi:intvalue="231"/>
              <xs:enumeration value="unknown" ncbi:intvalue="9999"/>
              <xs:enumeration value="none" ncbi:intvalue="10000"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- enumerate modification types -->
<xs:element name="MSModType">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    modaa	-  at particular amino acids
    modn	-  at the N terminus of a protein
    modnaa	-  at the N terminus of a protein at particular amino acids
    modc	-  at the C terminus of a protein
    modcaa	-  at the C terminus of a protein at particular amino acids
    modnp	-  at the N terminus of a peptide
    modnpaa	-  at the N terminus of a peptide at particular amino acids
    modcp	-  at the C terminus of a peptide
    modcpaa	-  at the C terminus of a peptide at particular amino acids
    modmax	-  the max number of modification types
-->
              <xs:enumeration value="modaa" ncbi:intvalue="0"/>
              <xs:enumeration value="modn" ncbi:intvalue="1"/>
              <xs:enumeration value="modnaa" ncbi:intvalue="2"/>
              <xs:enumeration value="modc" ncbi:intvalue="3"/>
              <xs:enumeration value="modcaa" ncbi:intvalue="4"/>
              <xs:enumeration value="modnp" ncbi:intvalue="5"/>
              <xs:enumeration value="modnpaa" ncbi:intvalue="6"/>
              <xs:enumeration value="modcp" ncbi:intvalue="7"/>
              <xs:enumeration value="modcpaa" ncbi:intvalue="8"/>
              <xs:enumeration value="modmax" ncbi:intvalue="9"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- mass container -->
<xs:element name="MSMassSet">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="MSMassSet_monomass" type="xs:double"/>
      <xs:element name="MSMassSet_averagemass" type="xs:double"/>
      <xs:element name="MSMassSet_n15mass" type="xs:double"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Modification Definition -->
<xs:element name="MSModSpec">
  <xs:complexType>
    <xs:sequence>
<!-- what is the mod -->
      <xs:element name="MSModSpec_mod">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSMod"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- modification type -->
      <xs:element name="MSModSpec_type">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSModType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- friendly name of mod -->
      <xs:element name="MSModSpec_name" type="xs:string"/>
<!-- monoisotopic mass -->
      <xs:element name="MSModSpec_monomass" type="xs:double"/>
<!-- average mass -->
      <xs:element name="MSModSpec_averagemass" type="xs:double"/>
<!-- monoisotopic n15 mass -->
      <xs:element name="MSModSpec_n15mass" type="xs:double"/>
<!-- residues to apply mod to -->
      <xs:element name="MSModSpec_residues" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSModSpec_residues_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- loss after precursor mass determination -->
      <xs:element name="MSModSpec_neutralloss" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSMassSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the equivalent Unimod Accession number -->
      <xs:element name="MSModSpec_unimod" type="xs:integer" minOccurs="0"/>
<!-- the PSI-MS equivalent name   -->
      <xs:element name="MSModSpec_psi-ms" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Holds a set of modifications -->
<xs:element name="MSModSpecSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="MSModSpec"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 How is charge to be handled?  Some input files are not clear
 on this.  For example, a dta file only specifies one charge, 
 even though the charge is not really known.
-->
<xs:element name="MSCalcPlusOne">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    dontcalc	-  don't guess charge one
    calc	-  guess charge one
-->
              <xs:enumeration value="dontcalc" ncbi:intvalue="0"/>
              <xs:enumeration value="calc" ncbi:intvalue="1"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- user instructions on whether to believe charges in input file -->
<xs:element name="MSCalcCharge">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    calculate	-  guess the charge(s) from the data
    usefile	-  use what the input file says
    userange	-  use the charge range specified
-->
              <xs:enumeration value="calculate" ncbi:intvalue="0"/>
              <xs:enumeration value="usefile" ncbi:intvalue="1"/>
              <xs:enumeration value="userange" ncbi:intvalue="2"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- How to handle precursor charge -->
<xs:element name="MSChargeHandle">
  <xs:complexType>
    <xs:sequence>
<!-- do we guess charge one? -->
      <xs:element name="MSChargeHandle_calcplusone" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSCalcPlusOne"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- how do we handle charges? -->
      <xs:element name="MSChargeHandle_calccharge" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSCalcCharge"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- if userange, what is the min? -->
      <xs:element name="MSChargeHandle_mincharge" type="xs:integer" default="2"/>
<!-- if userange, what is the max? -->
      <xs:element name="MSChargeHandle_maxcharge" type="xs:integer" default="3"/>
<!-- at which precursor charge to consider +2 ions? -->
      <xs:element name="MSChargeHandle_considermult" type="xs:integer" default="3"/>
<!-- what % of peaks below precursor needed to call as +1 -->
      <xs:element name="MSChargeHandle_plusone" type="xs:double"/>
<!-- maximum product ion charge -->
      <xs:element name="MSChargeHandle_maxproductcharge" type="xs:integer" minOccurs="0"/>
<!-- product charge always less thanor equal to precursor? -->
      <xs:element name="MSChargeHandle_prodlesspre" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- what type of atomic mass to use -->
<xs:element name="MSSearchType">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="monoisotopic" ncbi:intvalue="0"/>
              <xs:enumeration value="average" ncbi:intvalue="1"/>
              <xs:enumeration value="monon15" ncbi:intvalue="2"/>
              <xs:enumeration value="exact" ncbi:intvalue="3"/>
              <xs:enumeration value="max" ncbi:intvalue="4"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- what is the charge dependence of the mass tolerance? -->
<xs:element name="MSZdependence">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    independent	-  mass tol. invariant with charge
    linearwithz	-  mass tol. scales with charge
-->
              <xs:enumeration value="independent" ncbi:intvalue="0"/>
              <xs:enumeration value="linearwithz" ncbi:intvalue="1"/>
              <xs:enumeration value="max" ncbi:intvalue="2"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- Iterative search settings -->
<xs:element name="MSIterativeSettings">
  <xs:complexType>
    <xs:sequence>
<!-- e-val threshold for re-searching spectra, 0 = always re-search -->
      <xs:element name="MSIterativeSettings_researchthresh" type="xs:double"/>
<!-- e-val threshold for picking sequence subset, 0 = all sequences -->
      <xs:element name="MSIterativeSettings_subsetthresh" type="xs:double"/>
<!-- e-val threshold for replacing hitset, 0 = only if better -->
      <xs:element name="MSIterativeSettings_replacethresh" type="xs:double"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Library search settings -->
<xs:element name="MSLibrarySettings">
  <xs:complexType>
    <xs:sequence>
<!-- names of search libraries -->
      <xs:element name="MSLibrarySettings_libnames">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSLibrarySettings_libnames_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- should there be a restriction on precursor mass? -->
      <xs:element name="MSLibrarySettings_presearch">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- use the omssa score? -->
      <xs:element name="MSLibrarySettings_useomssascore">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- use the number of replicates score? -->
      <xs:element name="MSLibrarySettings_usereplicatescore">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- use the qtof score? -->
      <xs:element name="MSLibrarySettings_qtofscore">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Generic search settings -->
<xs:element name="MSSearchSettings">
  <xs:complexType>
    <xs:sequence>
<!-- average or monoisotopic? -->
      <xs:element name="MSSearchSettings_precursorsearchtype">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSearchType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- average or monoisotopic? -->
      <xs:element name="MSSearchSettings_productsearchtype">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSearchType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- which ions to search? -->
      <xs:element name="MSSearchSettings_ionstosearch">
        <xs:complexType>
	  <!-- John modification: minOccurs and maxOccurs use to be on sequence element, not element element -->
          <xs:sequence >
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="MSIonType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- peptide mass tolerance -->
      <xs:element name="MSSearchSettings_peptol" type="xs:double"/>
<!-- msms mass tolerance -->
      <xs:element name="MSSearchSettings_msmstol" type="xs:double"/>
<!-- what is the charge dependence of the mass tolerance? -->
      <xs:element name="MSSearchSettings_zdep">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSZdependence"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 evalue cutoff
 next 3 fields define intensity fraction below
 which peaks will be discard
-->
      <xs:element name="MSSearchSettings_cutoff" type="xs:double"/>
<!-- the start of the cutoff, fraction of most intense peak -->
      <xs:element name="MSSearchSettings_cutlo" type="xs:double"/>
<!-- the end of the cutoff -->
      <xs:element name="MSSearchSettings_cuthi" type="xs:double"/>
<!-- the increment of the cutoff -->
      <xs:element name="MSSearchSettings_cutinc" type="xs:double"/>
<!-- the size of the single charge filtering window -->
      <xs:element name="MSSearchSettings_singlewin" type="xs:integer"/>
<!-- the size of the double charge filtering window -->
      <xs:element name="MSSearchSettings_doublewin" type="xs:integer"/>
<!-- the number of peaks allowed in the single window -->
      <xs:element name="MSSearchSettings_singlenum" type="xs:integer"/>
<!-- the number of peaks allowed in the double window -->
      <xs:element name="MSSearchSettings_doublenum" type="xs:integer"/>
<!-- fixed PTM's -->
      <xs:element name="MSSearchSettings_fixed">
        <xs:complexType>
    <!-- John modification, moved minOccurs and maxOccurs from sequence element to element element -->
          <xs:sequence>
            <xs:element ref="MSMod" minOccurs="0" maxOccurs="unbounded" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- variable PTM's -->
      <xs:element name="MSSearchSettings_variable">
        <xs:complexType>
    <!-- John modification, moved minOccurs and maxOccurs from sequence element to element element -->
          <xs:sequence>
            <xs:element ref="MSMod" minOccurs="0" maxOccurs="unbounded" />
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- digestion enzyme -->
      <xs:element name="MSSearchSettings_enzyme">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSEnzymes"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- number of missed cleaves allowed -->
      <xs:element name="MSSearchSettings_missedcleave" type="xs:integer"/>
<!--
 the number of hits kept in memory
 for a spectrum
-->
      <xs:element name="MSSearchSettings_hitlistlen" type="xs:integer" default="25"/>
<!-- sequence set to search, e.g. "nr" -->
      <xs:element name="MSSearchSettings_db" type="xs:string"/>
<!-- number of m/z to consider in first pass -->
      <xs:element name="MSSearchSettings_tophitnum" type="xs:integer"/>
<!-- minimum number of m/z values for a valid hit -->
      <xs:element name="MSSearchSettings_minhit" type="xs:integer" default="2"/>
<!-- minimum number of m/z for a valid spectra -->
      <xs:element name="MSSearchSettings_minspectra" type="xs:integer" default="4"/>
<!-- scale for m/z float to integer -->
      <xs:element name="MSSearchSettings_scale" type="xs:integer" default="100"/>
<!--
 maximum number of mass ladders per
 database peptide
-->
      <xs:element name="MSSearchSettings_maxmods" type="xs:integer" default="64"/>
<!-- taxa to limit search -->
      <xs:element name="MSSearchSettings_taxids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSSearchSettings_taxids_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- how to deal with charges -->
      <xs:element name="MSSearchSettings_chargehandling" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSChargeHandle"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- user defined modifications -->
      <xs:element name="MSSearchSettings_usermods" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSModSpecSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- min number of counts per precursor bin -->
      <xs:element name="MSSearchSettings_pseudocount" type="xs:integer" default="1"/>
<!-- should b1 product be in search (1=no, 0=yes) -->
      <xs:element name="MSSearchSettings_searchb1" type="xs:integer" default="0"/>
<!-- should c terminus ion be searched (1=no, 0=yes) -->
      <xs:element name="MSSearchSettings_searchctermproduct" type="xs:integer" default="0"/>
<!-- max number of ions in each series (0=all) -->
      <xs:element name="MSSearchSettings_maxproductions" type="xs:integer" default="0"/>
<!-- min number of AA in peptide for noenzyme search -->
      <xs:element name="MSSearchSettings_minnoenzyme" type="xs:integer" default="4"/>
<!-- max number of AA in peptide for noenzyme search (0=none) -->
      <xs:element name="MSSearchSettings_maxnoenzyme" type="xs:integer" default="0"/>
<!-- the threshold in Da for adding neutron -->
      <xs:element name="MSSearchSettings_exactmass" type="xs:double" minOccurs="0"/>
<!-- id of the search settings -->
      <xs:element name="MSSearchSettings_settingid" type="xs:integer" minOccurs="0"/>
<!-- iterative search settings -->
      <xs:element name="MSSearchSettings_iterativesettings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSIterativeSettings"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- turn on aggressive precursor culling for ETD (0=none) -->
      <xs:element name="MSSearchSettings_precursorcull" type="xs:integer" minOccurs="0"/>
<!-- input files -->
      <xs:element name="MSSearchSettings_infiles" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSInFile"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- output files -->
      <xs:element name="MSSearchSettings_outfiles" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSOutFile"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- turn on correlation score (1=nocorr) -->
      <xs:element name="MSSearchSettings_nocorrelationscore" type="xs:integer" minOccurs="0"/>
<!-- probability of a consecutive ion (used in correlation) -->
      <xs:element name="MSSearchSettings_probfollowingion" type="xs:double" minOccurs="0"/>
<!-- should nmethionine be cleaved? -->
      <xs:element name="MSSearchSettings_nmethionine" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- fraction allowable adjustment of product mass tolerance -->
      <xs:element name="MSSearchSettings_automassadjust" type="xs:double" minOccurs="0"/>
<!-- low mass filter in Daltons, unscaled -->
      <xs:element name="MSSearchSettings_lomasscutoff" type="xs:double" minOccurs="0"/>
<!-- library search settings -->
      <xs:element name="MSSearchSettings_libsearchsettings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSLibrarySettings"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- which ions to use no proline rule -->
      <xs:element name="MSSearchSettings_noprolineions" minOccurs="0">
        <xs:complexType>
	  <!-- John modification, moved minOccurs and maxOccurs from sequence element to element element -->
          <xs:sequence>
            <xs:element minOccurs="0" maxOccurs="unbounded" ref="MSIonType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- do reverse search -->
      <xs:element name="MSSearchSettings_reversesearch" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- extra search settings -->
      <xs:element name="MSSearchSettings_othersettings" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="NameValue"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="MSSerialDataFormat">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    asntext	-  open ASN.1 text format
    asnbinary	-  open ASN.1 binary format
    xml	-  open XML format
    csv	-  csv (excel)
    pepxml	-  pepXML format
    xmlbz2	-  bzip2 XML format
-->
              <xs:enumeration value="none" ncbi:intvalue="0"/>
              <xs:enumeration value="asntext" ncbi:intvalue="1"/>
              <xs:enumeration value="asnbinary" ncbi:intvalue="2"/>
              <xs:enumeration value="xml" ncbi:intvalue="3"/>
              <xs:enumeration value="csv" ncbi:intvalue="4"/>
              <xs:enumeration value="pepxml" ncbi:intvalue="5"/>
              <xs:enumeration value="xmlbz2" ncbi:intvalue="6"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<xs:element name="MSOutFile">
  <xs:complexType>
    <xs:sequence>
<!-- output file name -->
      <xs:element name="MSOutFile_outfile" type="xs:string"/>
<!-- output file type -->
      <xs:element name="MSOutFile_outfiletype">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSerialDataFormat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- should the output include the request? -->
      <xs:element name="MSOutFile_includerequest">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="MSSpectrumFileType">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    oms	-  asn.1 binary for iterative search
    omx	-  xml for iterative search
    xml	-  xml MSRequest
    omxbz2	-  bzip2 omx file
-->
              <xs:enumeration value="dta" ncbi:intvalue="0"/>
              <xs:enumeration value="dtablank" ncbi:intvalue="1"/>
              <xs:enumeration value="dtaxml" ncbi:intvalue="2"/>
              <xs:enumeration value="asc" ncbi:intvalue="3"/>
              <xs:enumeration value="pkl" ncbi:intvalue="4"/>
              <xs:enumeration value="pks" ncbi:intvalue="5"/>
              <xs:enumeration value="sciex" ncbi:intvalue="6"/>
              <xs:enumeration value="mgf" ncbi:intvalue="7"/>
              <xs:enumeration value="unknown" ncbi:intvalue="8"/>
              <xs:enumeration value="oms" ncbi:intvalue="9"/>
              <xs:enumeration value="omx" ncbi:intvalue="10"/>
              <xs:enumeration value="xml" ncbi:intvalue="11"/>
              <xs:enumeration value="omxbz2" ncbi:intvalue="12"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<xs:element name="MSInFile">
  <xs:complexType>
    <xs:sequence>
<!-- input file name -->
      <xs:element name="MSInFile_infile" type="xs:string"/>
<!-- input file type -->
      <xs:element name="MSInFile_infiletype">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSpectrumFileType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="MSSearchSettingsSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="MSSearchSettings"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- The search request that is given to the OMSSA algorithm -->
<xs:element name="MSRequest">
  <xs:complexType>
    <xs:sequence>
<!-- the set of spectra -->
      <xs:element name="MSRequest_spectra">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSpectrumset"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the search settings -->
      <xs:element name="MSRequest_settings">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSearchSettings"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- request id -->
      <xs:element name="MSRequest_rid" type="xs:string" minOccurs="0"/>
<!-- additional search runs -->
      <xs:element name="MSRequest_moresettings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSSearchSettingsSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- list of mods that can be used in search -->
      <xs:element name="MSRequest_modset" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSModSpecSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- enumeration of ion types -->
<xs:element name="MSIonType">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="a" ncbi:intvalue="0"/>
              <xs:enumeration value="b" ncbi:intvalue="1"/>
              <xs:enumeration value="c" ncbi:intvalue="2"/>
              <xs:enumeration value="x" ncbi:intvalue="3"/>
              <xs:enumeration value="y" ncbi:intvalue="4"/>
              <xs:enumeration value="z" ncbi:intvalue="5"/>
              <xs:enumeration value="parent" ncbi:intvalue="6"/>
              <xs:enumeration value="internal" ncbi:intvalue="7"/>
              <xs:enumeration value="immonium" ncbi:intvalue="8"/>
              <xs:enumeration value="unknown" ncbi:intvalue="9"/>
              <xs:enumeration value="max" ncbi:intvalue="10"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- types of neutral loss -->
<xs:element name="MSIonNeutralLoss">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    water	-  minus 18 Da
    ammonia	-  minus 17 Da
-->
              <xs:enumeration value="water" ncbi:intvalue="0"/>
              <xs:enumeration value="ammonia" ncbi:intvalue="1"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- iosotopic type of ion -->
<xs:element name="MSIonIsotopicType">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    monoisotopic	-  no c13s in molecule
    c13	-  one c13 in molecule
    c13two	-  two c13s in molecule, and so on...
-->
              <xs:enumeration value="monoisotopic" ncbi:intvalue="0"/>
              <xs:enumeration value="c13" ncbi:intvalue="1"/>
              <xs:enumeration value="c13two" ncbi:intvalue="2"/>
              <xs:enumeration value="c13three" ncbi:intvalue="3"/>
              <xs:enumeration value="c13four" ncbi:intvalue="4"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- type of immonium ion -->
<xs:element name="MSImmonium">
  <xs:complexType>
    <xs:sequence>
<!-- parent amino acid -->
      <xs:element name="MSImmonium_parent" type="xs:string"/>
<!-- product ion code -->
      <xs:element name="MSImmonium_product" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- ion type at a finer level than ion series -->
<xs:element name="MSIon">
  <xs:complexType>
    <xs:sequence>
<!-- is this peak a neutral loss? -->
      <xs:element name="MSIon_neutralloss" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSIonNeutralLoss"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- isotopic composition of peak -->
      <xs:element name="MSIon_isotope" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSIonIsotopicType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- if iontype is internal, this is the internal sequence -->
      <xs:element name="MSIon_internal" type="xs:string" minOccurs="0"/>
<!-- if iontype is immonium, show characteristics -->
      <xs:element name="MSIon_immonium" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSImmonium"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- annotated comments about the ion -->
<xs:element name="MSIonAnnot">
  <xs:complexType>
    <xs:sequence>
<!-- is this peak suspect? -->
      <xs:element name="MSIonAnnot_suspect" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- what is the difference in mass from library spectrum? -->
      <xs:element name="MSIonAnnot_massdiff" type="xs:double" minOccurs="0"/>
<!-- are the lower mass peaks missing? -->
      <xs:element name="MSIonAnnot_missingisotope" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- defines a particular ion -->
<xs:element name="MSMZHit">
  <xs:complexType>
    <xs:sequence>
<!-- ion type, e.g. b -->
      <xs:element name="MSMZHit_ion">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSIonType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- ion charge -->
      <xs:element name="MSMZHit_charge" type="xs:integer"/>
<!-- the sequential number of the ion -->
      <xs:element name="MSMZHit_number" type="xs:integer"/>
<!-- scaled m/z value in Da -->
      <xs:element name="MSMZHit_mz" type="xs:integer"/>
<!-- the index of the peak in the original spectrum -->
      <xs:element name="MSMZHit_index" type="xs:integer" minOccurs="0"/>
<!-- more information about the ion type -->
      <xs:element name="MSMZHit_moreion" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSIon"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- annotations on the ion -->
      <xs:element name="MSMZHit_annotation" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSIonAnnot"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 contains information about sequences with identical peptide
 sequences
-->
<xs:element name="MSPepHit">
  <xs:complexType>
    <xs:sequence>
<!-- start position (inclusive) in sequence -->
      <xs:element name="MSPepHit_start" type="xs:integer"/>
<!-- stop position (inclusive) in sequence -->
      <xs:element name="MSPepHit_stop" type="xs:integer"/>
<!-- genbank identifier -->
      <xs:element name="MSPepHit_gi" type="xs:integer" minOccurs="0"/>
<!-- sequence accession -->
      <xs:element name="MSPepHit_accession" type="xs:string" minOccurs="0"/>
<!-- sequence description -->
      <xs:element name="MSPepHit_defline" type="xs:string" minOccurs="0"/>
<!-- length of protein -->
      <xs:element name="MSPepHit_protlength" type="xs:integer" minOccurs="0"/>
<!-- blast library oid  -->
      <xs:element name="MSPepHit_oid" type="xs:integer" minOccurs="0"/>
<!-- reversed sequence -->
      <xs:element name="MSPepHit_reversed" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- AA before the peptide -->
      <xs:element name="MSPepHit_pepstart" type="xs:string" minOccurs="0"/>
<!-- AA after the peptide -->
      <xs:element name="MSPepHit_pepstop" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- modifications to a hit peptide -->
<xs:element name="MSModHit">
  <xs:complexType>
    <xs:sequence>
<!-- the position in the peptide -->
      <xs:element name="MSModHit_site" type="xs:integer"/>
<!-- the type of modification -->
      <xs:element name="MSModHit_modtype">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSMod"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- sets of scores -->
<xs:element name="MSScoreSet">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="MSScoreSet_name" type="xs:string"/>
      <xs:element name="MSScoreSet_value" type="xs:double"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- hits to a given spectrum -->
<xs:element name="MSHits">
  <xs:complexType>
    <xs:sequence>
<!-- E-value (expect value) -->
      <xs:element name="MSHits_evalue" type="xs:double"/>
<!-- P-value (probability value) -->
      <xs:element name="MSHits_pvalue" type="xs:double"/>
<!-- the charge state used in search.  -1 == not +1 -->
      <xs:element name="MSHits_charge" type="xs:integer"/>
<!-- peptides that match this hit -->
      <xs:element name="MSHits_pephits">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSPepHit"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- ions hit -->
      <xs:element name="MSHits_mzhits" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSMZHit"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the peptide sequence -->
      <xs:element name="MSHits_pepstring" type="xs:string" minOccurs="0"/>
<!-- scaled experimental mass of peptide in Da -->
      <xs:element name="MSHits_mass" type="xs:integer" minOccurs="0"/>
<!-- modifications to sequence -->
      <xs:element name="MSHits_mods" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSModHit"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- AA before the peptide (depricated) -->
      <xs:element name="MSHits_pepstart" type="xs:string" minOccurs="0"/>
<!-- AA after the peptide (depricated) -->
      <xs:element name="MSHits_pepstop" type="xs:string" minOccurs="0"/>
<!-- length of protein hit (depricated) -->
      <xs:element name="MSHits_protlength" type="xs:integer" minOccurs="0"/>
<!-- scaled theoretical mass of peptide hit -->
      <xs:element name="MSHits_theomass" type="xs:integer" minOccurs="0"/>
<!-- blast library oid (depricated)  -->
      <xs:element name="MSHits_oid" type="xs:integer" minOccurs="0"/>
<!-- optional scores (for library search) -->
      <xs:element name="MSHits_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSScoreSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- library search accesssion -->
      <xs:element name="MSHits_libaccession" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- error return for a particular spectrum's hitset -->
<xs:element name="MSHitError">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    unable2read	-  can't read the spectrum
    notenuffpeaks	-  not enough peaks to search
-->
              <xs:enumeration value="none" ncbi:intvalue="0"/>
              <xs:enumeration value="generalerr" ncbi:intvalue="1"/>
              <xs:enumeration value="unable2read" ncbi:intvalue="2"/>
              <xs:enumeration value="notenuffpeaks" ncbi:intvalue="3"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- MSHitSet annotation by end user -->
<xs:element name="MSUserAnnot">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="none" ncbi:intvalue="0"/>
              <xs:enumeration value="delete" ncbi:intvalue="1"/>
              <xs:enumeration value="flag" ncbi:intvalue="2"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- contains a set of hits to a single spectrum -->
<xs:element name="MSHitSet">
  <xs:complexType>
    <xs:sequence>
<!-- unique number of spectrum -->
      <xs:element name="MSHitSet_number" type="xs:integer"/>
<!-- error, if any -->
      <xs:element name="MSHitSet_error" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSHitError"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- set of hit to spectrum -->
      <xs:element name="MSHitSet_hits" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSHits"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- filenames or other ids of spectra searched -->
      <xs:element name="MSHitSet_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="MSHitSet_ids_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- extra info: retention times, etc. -->
      <xs:element name="MSHitSet_namevalue" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="NameValue"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- id of the search setting used -->
      <xs:element name="MSHitSet_settingid" type="xs:integer" minOccurs="0"/>
<!-- allows users to flag certain -->
      <xs:element name="MSHitSet_userannotation" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSUserAnnot"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- error return for the entire response -->
<xs:element name="MSResponseError">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    noblastdb	-  unable to open blast library
    noinput	-  input missing
-->
              <xs:enumeration value="none" ncbi:intvalue="0"/>
              <xs:enumeration value="generalerr" ncbi:intvalue="1"/>
              <xs:enumeration value="noblastdb" ncbi:intvalue="2"/>
              <xs:enumeration value="noinput" ncbi:intvalue="3"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- bioseq container -->
<xs:element name="MSBioseq">
  <xs:complexType>
    <xs:sequence>
<!-- blast library oid -->
      <xs:element name="MSBioseq_oid" type="xs:integer"/>
      <xs:element name="MSBioseq_seq">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Bioseq"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="MSBioseqSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="MSBioseq"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- search results -->
<xs:element name="MSResponse">
  <xs:complexType>
    <xs:sequence>
<!-- hits grouped by spectrum -->
      <xs:element name="MSResponse_hitsets">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSHitSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- scale to change m/z float to integer -->
      <xs:element name="MSResponse_scale" type="xs:integer" default="100"/>
<!-- request id -->
      <xs:element name="MSResponse_rid" type="xs:string" minOccurs="0"/>
<!-- error response -->
      <xs:element name="MSResponse_error" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSResponseError"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- version of OMSSA -->
      <xs:element name="MSResponse_version" type="xs:string" minOccurs="0"/>
<!-- email address for notification -->
      <xs:element name="MSResponse_email" type="xs:string" minOccurs="0"/>
<!-- version of db searched (usually size) -->
      <xs:element name="MSResponse_dbversion" type="xs:integer" minOccurs="0"/>
<!-- sequences found in search      -->
      <xs:element name="MSResponse_bioseqs" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MSBioseqSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- holds both search requests and responses -->
<xs:element name="MSSearch">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="MSSearch_request" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSRequest"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="MSSearch_response" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MSResponse"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:element name="Bioseq">
  <xs:complexType>
    <xs:sequence>
<!-- equivalent identifiers -->
      <xs:element name="Bioseq_id">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- descriptors -->
      <xs:element name="Bioseq_descr" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-descr"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the sequence data -->
      <xs:element name="Bioseq_inst">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-inst"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Bioseq_annot" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-annot"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
*** Descriptors *****************************
*
-->
<xs:element name="Seq-descr">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seqdesc"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Seqdesc">
  <xs:complexType>
    <xs:choice>
<!-- type of molecule -->
      <xs:element name="Seqdesc_mol-type">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="GIBB-mol"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- modifiers -->
      <xs:element name="Seqdesc_modif">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="GIBB-mod"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- sequencing method -->
      <xs:element name="Seqdesc_method">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="GIBB-method"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a name for this sequence -->
      <xs:element name="Seqdesc_name" type="xs:string"/>
<!-- a title for this sequence -->
      <xs:element name="Seqdesc_title" type="xs:string"/>
<!-- if all from one organism -->
      <xs:element name="Seqdesc_org">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Org-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a more extensive comment -->
      <xs:element name="Seqdesc_comment" type="xs:string"/>
<!-- a numbering system -->
      <xs:element name="Seqdesc_num">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Numbering"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- map location of this sequence -->
      <xs:element name="Seqdesc_maploc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- PIR specific info -->
      <xs:element name="Seqdesc_pir">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PIR-block"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- GenBank specific info -->
      <xs:element name="Seqdesc_genbank">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="GB-block"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a reference to the publication -->
      <xs:element name="Seqdesc_pub">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pubdesc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- overall region (globin locus) -->
      <xs:element name="Seqdesc_region" type="xs:string"/>
<!-- user defined object -->
      <xs:element name="Seqdesc_user">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- SWISSPROT specific info -->
      <xs:element name="Seqdesc_sp">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SP-block"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- xref to other databases -->
      <xs:element name="Seqdesc_dbxref">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- EMBL specific information -->
      <xs:element name="Seqdesc_embl">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="EMBL-block"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- date entry first created/released -->
      <xs:element name="Seqdesc_create-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- date of last update -->
      <xs:element name="Seqdesc_update-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- PRF specific information -->
      <xs:element name="Seqdesc_prf">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PRF-block"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- PDB specific information -->
      <xs:element name="Seqdesc_pdb">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PDB-block"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- cofactor, etc associated but not bound -->
      <xs:element name="Seqdesc_het">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Heterogen"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- source of materials, includes Org-ref -->
      <xs:element name="Seqdesc_source">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="BioSource"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- info on the molecule and techniques -->
      <xs:element name="Seqdesc_molinfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MolInfo"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
******* NOTE:
*       mol-type, modif, method, and org are consolidated and expanded
*       in Org-ref, BioSource, and MolInfo in this specification. They
*       will be removed in later specifications. Do not use them in the
*       the future. Instead expect the new structures.
*
***************************
********************************************************************

 MolInfo gives information on the
 classification of the type and quality of the sequence

 WARNING: this will replace GIBB-mol, GIBB-mod, GIBB-method

********************************************************************
-->
<xs:element name="MolInfo">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="MolInfo_biomol" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="unknown">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    pre-RNA	-  precursor RNA of any sort really 
    other-genetic	-  other genetic material
    genomic-mRNA	-  reported a mix of genomic and cdna sequence
    cRNA	-  viral RNA genome copy intermediate
    snoRNA	-  small nucleolar RNA
    transcribed-RNA	-  transcribed RNA other than existing classes
-->
                    <xs:enumeration value="unknown" ncbi:intvalue="0"/>
                    <xs:enumeration value="genomic" ncbi:intvalue="1"/>
                    <xs:enumeration value="pre-RNA" ncbi:intvalue="2"/>
                    <xs:enumeration value="mRNA" ncbi:intvalue="3"/>
                    <xs:enumeration value="rRNA" ncbi:intvalue="4"/>
                    <xs:enumeration value="tRNA" ncbi:intvalue="5"/>
                    <xs:enumeration value="snRNA" ncbi:intvalue="6"/>
                    <xs:enumeration value="scRNA" ncbi:intvalue="7"/>
                    <xs:enumeration value="peptide" ncbi:intvalue="8"/>
                    <xs:enumeration value="other-genetic" ncbi:intvalue="9"/>
                    <xs:enumeration value="genomic-mRNA" ncbi:intvalue="10"/>
                    <xs:enumeration value="cRNA" ncbi:intvalue="11"/>
                    <xs:enumeration value="snoRNA" ncbi:intvalue="12"/>
                    <xs:enumeration value="transcribed-RNA" ncbi:intvalue="13"/>
                    <xs:enumeration value="ncRNA" ncbi:intvalue="14"/>
                    <xs:enumeration value="tmRNA" ncbi:intvalue="15"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="MolInfo_tech" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="unknown">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    standard	-  standard sequencing
    est	-  Expressed Sequence Tag
    sts	-  Sequence Tagged Site
    survey	-  one-pass genomic sequence
    genemap	-  from genetic mapping techniques
    physmap	-  from physical mapping techniques
    derived	-  derived from other data, not a primary entity
    concept-trans	-  conceptual translation
    seq-pept	-  peptide was sequenced
    both	-  concept transl. w/ partial pept. seq.
    seq-pept-overlap	-  sequenced peptide, ordered by overlap
    seq-pept-homol	-  sequenced peptide, ordered by homology
    concept-trans-a	-  conceptual transl. supplied by author
    htgs-1	-  unordered High Throughput sequence contig
    htgs-2	-  ordered High Throughput sequence contig
    htgs-3	-  finished High Throughput sequence
    fli-cdna	-  full length insert cDNA
    htgs-0	-  single genomic reads for coordination
    htc	-  high throughput cDNA
    wgs	-  whole genome shotgun sequencing
    barcode	-  barcode of life project
    composite-wgs-htgs	-  composite of WGS and HTGS
    tsa	-  transcriptome shotgun assembly
    other	-  use Source.techexp
-->
                    <xs:enumeration value="unknown" ncbi:intvalue="0"/>
                    <xs:enumeration value="standard" ncbi:intvalue="1"/>
                    <xs:enumeration value="est" ncbi:intvalue="2"/>
                    <xs:enumeration value="sts" ncbi:intvalue="3"/>
                    <xs:enumeration value="survey" ncbi:intvalue="4"/>
                    <xs:enumeration value="genemap" ncbi:intvalue="5"/>
                    <xs:enumeration value="physmap" ncbi:intvalue="6"/>
                    <xs:enumeration value="derived" ncbi:intvalue="7"/>
                    <xs:enumeration value="concept-trans" ncbi:intvalue="8"/>
                    <xs:enumeration value="seq-pept" ncbi:intvalue="9"/>
                    <xs:enumeration value="both" ncbi:intvalue="10"/>
                    <xs:enumeration value="seq-pept-overlap" ncbi:intvalue="11"/>
                    <xs:enumeration value="seq-pept-homol" ncbi:intvalue="12"/>
                    <xs:enumeration value="concept-trans-a" ncbi:intvalue="13"/>
                    <xs:enumeration value="htgs-1" ncbi:intvalue="14"/>
                    <xs:enumeration value="htgs-2" ncbi:intvalue="15"/>
                    <xs:enumeration value="htgs-3" ncbi:intvalue="16"/>
                    <xs:enumeration value="fli-cdna" ncbi:intvalue="17"/>
                    <xs:enumeration value="htgs-0" ncbi:intvalue="18"/>
                    <xs:enumeration value="htc" ncbi:intvalue="19"/>
                    <xs:enumeration value="wgs" ncbi:intvalue="20"/>
                    <xs:enumeration value="barcode" ncbi:intvalue="21"/>
                    <xs:enumeration value="composite-wgs-htgs" ncbi:intvalue="22"/>
                    <xs:enumeration value="tsa" ncbi:intvalue="23"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!--
 explanation if tech not enough

 Completeness is not indicated in most records.  For genomes, assume
 the sequences are incomplete unless specifically marked as complete.
 For mRNAs, assume the ends are not known exactly unless marked as
 having the left or right end.

-->
      <xs:element name="MolInfo_techexp" type="xs:string" minOccurs="0"/>
      <xs:element name="MolInfo_completeness" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="unknown">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    complete	-  complete biological entity
    partial	-  partial but no details given
    no-left	-  missing 5' or NH3 end
    no-right	-  missing 3' or COOH end
    no-ends	-  missing both ends
    has-left	-  5' or NH3 end present
    has-right	-  3' or COOH end present
-->
                    <xs:enumeration value="unknown" ncbi:intvalue="0"/>
                    <xs:enumeration value="complete" ncbi:intvalue="1"/>
                    <xs:enumeration value="partial" ncbi:intvalue="2"/>
                    <xs:enumeration value="no-left" ncbi:intvalue="3"/>
                    <xs:enumeration value="no-right" ncbi:intvalue="4"/>
                    <xs:enumeration value="no-ends" ncbi:intvalue="5"/>
                    <xs:enumeration value="has-left" ncbi:intvalue="6"/>
                    <xs:enumeration value="has-right" ncbi:intvalue="7"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- identifies particular ncRNA -->
      <xs:element name="MolInfo_gbmoltype" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- type of molecule represented -->
<xs:element name="GIBB-mol">
  <xs:complexType>
    <xs:attribute name="value" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:string">
<!--
    pre-mRNA	-  precursor RNA of any sort really 
    other-genetic	-  other genetic material
    genomic-mRNA	-  reported a mix of genomic and cdna sequence
-->
          <xs:enumeration value="unknown"/>
          <xs:enumeration value="genomic"/>
          <xs:enumeration value="pre-mRNA"/>
          <xs:enumeration value="mRNA"/>
          <xs:enumeration value="rRNA"/>
          <xs:enumeration value="tRNA"/>
          <xs:enumeration value="snRNA"/>
          <xs:enumeration value="scRNA"/>
          <xs:enumeration value="peptide"/>
          <xs:enumeration value="other-genetic"/>
          <xs:enumeration value="genomic-mRNA"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
</xs:element>

<!-- GenInfo Backbone modifiers -->
<xs:element name="GIBB-mod">
  <xs:complexType>
    <xs:attribute name="value" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:string">
<!--
    mutagen	-  subject of mutagenesis ?
    natmut	-  natural mutant ?
    no-left	-  missing left end (5' for na, NH2 for aa)
    no-right	-  missing right end (3' or COOH)
    est	-  expressed sequence tag
    sts	-  sequence tagged site
    survey	-  one pass survey sequence
    genemap	-  is a genetic map
    restmap	-  is an ordered restriction map
    physmap	-  is a physical map (not ordered restriction map)
-->
          <xs:enumeration value="dna"/>
          <xs:enumeration value="rna"/>
          <xs:enumeration value="extrachrom"/>
          <xs:enumeration value="plasmid"/>
          <xs:enumeration value="mitochondrial"/>
          <xs:enumeration value="chloroplast"/>
          <xs:enumeration value="kinetoplast"/>
          <xs:enumeration value="cyanelle"/>
          <xs:enumeration value="synthetic"/>
          <xs:enumeration value="recombinant"/>
          <xs:enumeration value="partial"/>
          <xs:enumeration value="complete"/>
          <xs:enumeration value="mutagen"/>
          <xs:enumeration value="natmut"/>
          <xs:enumeration value="transposon"/>
          <xs:enumeration value="insertion-seq"/>
          <xs:enumeration value="no-left"/>
          <xs:enumeration value="no-right"/>
          <xs:enumeration value="macronuclear"/>
          <xs:enumeration value="proviral"/>
          <xs:enumeration value="est"/>
          <xs:enumeration value="sts"/>
          <xs:enumeration value="survey"/>
          <xs:enumeration value="chromoplast"/>
          <xs:enumeration value="genemap"/>
          <xs:enumeration value="restmap"/>
          <xs:enumeration value="physmap"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
</xs:element>

<!-- sequencing methods -->
<xs:element name="GIBB-method">
  <xs:complexType>
    <xs:attribute name="value" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:string">
<!--
    concept-trans	-  conceptual translation
    seq-pept	-  peptide was sequenced
    both	-  concept transl. w/ partial pept. seq.
    seq-pept-overlap	-  sequenced peptide, ordered by overlap
    seq-pept-homol	-  sequenced peptide, ordered by homology
    concept-trans-a	-  conceptual transl. supplied by author
-->
          <xs:enumeration value="concept-trans"/>
          <xs:enumeration value="seq-pept"/>
          <xs:enumeration value="both"/>
          <xs:enumeration value="seq-pept-overlap"/>
          <xs:enumeration value="seq-pept-homol"/>
          <xs:enumeration value="concept-trans-a"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
</xs:element>

<!-- any display numbering system -->
<xs:element name="Numbering">
  <xs:complexType>
    <xs:choice>
<!-- continuous numbering -->
      <xs:element name="Numbering_cont">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Num-cont"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- enumerated names for residues -->
      <xs:element name="Numbering_enum">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Num-enum"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- by reference to another sequence -->
      <xs:element name="Numbering_ref">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Num-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- supports mapping to a float system -->
      <xs:element name="Numbering_real">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Num-real"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- continuous display numbering system -->
<xs:element name="Num-cont">
  <xs:complexType>
    <xs:sequence>
<!-- number assigned to first residue -->
      <xs:element name="Num-cont_refnum" type="xs:integer" default="1"/>
<!-- 0 used? -->
      <xs:element name="Num-cont_has-zero" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- ascending numbers? -->
      <xs:element name="Num-cont_ascending" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="true">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- any tags to residues -->
<xs:element name="Num-enum">
  <xs:complexType>
    <xs:sequence>
<!-- number of tags to follow -->
      <xs:element name="Num-enum_num" type="xs:integer"/>
<!-- the tags -->
      <xs:element name="Num-enum_names">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Num-enum_names_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- by reference to other sequences -->
<xs:element name="Num-ref">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Num-ref_type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    sources	-  by segmented or const seq sources
    aligns	-  by alignments given below
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="sources"/>
                <xs:enumeration value="aligns"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Num-ref_aligns" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-align"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- mapping to floating point system -->
<xs:element name="Num-real">
  <xs:complexType>
    <xs:sequence>
<!-- from an integer system used by Bioseq -->
      <xs:element name="Num-real_a" type="xs:double"/>
<!-- position = (a * int_position) + b -->
      <xs:element name="Num-real_b" type="xs:double"/>
      <xs:element name="Num-real_units" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- how sequence presented in pub -->
<xs:element name="Pubdesc">
  <xs:complexType>
    <xs:sequence>
<!-- the citation(s) -->
      <xs:element name="Pubdesc_pub">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub-equiv"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- name used in paper -->
      <xs:element name="Pubdesc_name" type="xs:string" minOccurs="0"/>
<!-- figure in paper -->
      <xs:element name="Pubdesc_fig" type="xs:string" minOccurs="0"/>
<!-- numbering from paper -->
      <xs:element name="Pubdesc_num" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Numbering"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- numbering problem with paper -->
      <xs:element name="Pubdesc_numexc" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- poly A tail indicated in figure? -->
      <xs:element name="Pubdesc_poly-a" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- map location reported in paper -->
      <xs:element name="Pubdesc_maploc" type="xs:string" minOccurs="0"/>
<!-- original sequence from paper -->
      <xs:element name="Pubdesc_seq-raw" type="xs:string" minOccurs="0"/>
<!-- this seq aligned with others in paper -->
      <xs:element name="Pubdesc_align-group" type="xs:integer" minOccurs="0"/>
<!-- any comment on this pub in context -->
      <xs:element name="Pubdesc_comment" type="xs:string" minOccurs="0"/>
      <xs:element name="Pubdesc_reftype" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="seq">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    seq	-  refers to sequence
    sites	-  refers to unspecified features
    feats	-  refers to specified features
    no-target	-  nothing specified (EMBL)
-->
                    <xs:enumeration value="seq" ncbi:intvalue="0"/>
                    <xs:enumeration value="sites" ncbi:intvalue="1"/>
                    <xs:enumeration value="feats" ncbi:intvalue="2"/>
                    <xs:enumeration value="no-target" ncbi:intvalue="3"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- cofactor, prosthetic group, inhibitor, etc -->
<xs:element name="Heterogen" type="xs:string"/>

<!--
*** Instances of sequences *******************************
*
 the sequence data itself
-->
<xs:element name="Seq-inst">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-inst_repr">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    not-set	-  empty
    virtual	-  no seq data
    raw	-  continuous sequence
    seg	-  segmented sequence
    const	-  constructed sequence
    ref	-  reference to another sequence
    consen	-  consensus sequence or pattern
    map	-  ordered map of any kind
    delta	-  sequence made by changes (delta) to others
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="virtual"/>
                <xs:enumeration value="raw"/>
                <xs:enumeration value="seg"/>
                <xs:enumeration value="const"/>
                <xs:enumeration value="ref"/>
                <xs:enumeration value="consen"/>
                <xs:enumeration value="map"/>
                <xs:enumeration value="delta"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-inst_mol">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    not-set	-    > cdna = rna
    na	-  just a nucleic acid
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="dna"/>
                <xs:enumeration value="rna"/>
                <xs:enumeration value="aa"/>
                <xs:enumeration value="na"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- length of sequence in residues -->
      <xs:element name="Seq-inst_length" type="xs:integer" minOccurs="0"/>
<!-- length uncertainty -->
      <xs:element name="Seq-inst_fuzz" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Int-fuzz"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-inst_topology" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="linear">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    tandem	-  some part of tandem repeat
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="linear"/>
                <xs:enumeration value="circular"/>
                <xs:enumeration value="tandem"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-inst_strand" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    ss	-  single strand
    ds	-  double strand
    other	-  default ds for DNA, ss for RNA, pept
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="ss"/>
                <xs:enumeration value="ds"/>
                <xs:enumeration value="mixed"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- the sequence -->
      <xs:element name="Seq-inst_seq-data" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-data"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- extensions for special types -->
      <xs:element name="Seq-inst_ext" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-ext"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- sequence history -->
      <xs:element name="Seq-inst_hist" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-hist"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
*** Sequence Extensions **********************************
*  for representing more complex types
*  const type uses Seq-hist.assembly
-->
<xs:element name="Seq-ext">
  <xs:complexType>
    <xs:choice>
<!-- segmented sequences -->
      <xs:element name="Seq-ext_seg">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seg-ext"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- hot link to another sequence (a view) -->
      <xs:element name="Seq-ext_ref">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Ref-ext"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- ordered map of markers -->
      <xs:element name="Seq-ext_map">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Map-ext"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-ext_delta">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Delta-ext"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Seg-ext">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seq-loc"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Ref-ext">
  <xs:complexType>
    <xs:sequence>
      <xs:element ref="Seq-loc"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Map-ext">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seq-feat"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Delta-ext">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Delta-seq"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Delta-seq">
  <xs:complexType>
    <xs:choice>
<!-- point to a sequence -->
      <xs:element name="Delta-seq_loc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a piece of sequence -->
      <xs:element name="Delta-seq_literal">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-literal"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-literal">
  <xs:complexType>
    <xs:sequence>
<!-- must give a length in residues -->
      <xs:element name="Seq-literal_length" type="xs:integer"/>
<!-- could be unsure -->
      <xs:element name="Seq-literal_fuzz" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Int-fuzz"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- may have the data -->
      <xs:element name="Seq-literal_seq-data" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-data"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
*** Sequence History Record ***********************************
** assembly = records how seq was assembled from others
** replaces = records sequences made obsolete by this one
** replaced-by = this seq is made obsolete by another(s)
-->
<xs:element name="Seq-hist">
  <xs:complexType>
    <xs:sequence>
<!-- how was this assembled? -->
      <xs:element name="Seq-hist_assembly" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-align"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- seq makes these seqs obsolete -->
      <xs:element name="Seq-hist_replaces" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-hist-rec"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- these seqs make this one obsolete -->
      <xs:element name="Seq-hist_replaced-by" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-hist-rec"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-hist_deleted" minOccurs="0">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Seq-hist_deleted_bool">
              <xs:complexType>
                <xs:attribute name="value" use="required">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:enumeration value="true"/>
                      <xs:enumeration value="false"/>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:attribute>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-hist_deleted_date">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Date"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-hist-rec">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-hist-rec_date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-hist-rec_ids">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
*** Various internal sequence representations ************
*      all are controlled, fixed length forms
 sequence representations
-->
<xs:element name="Seq-data">
  <xs:complexType>
    <xs:choice>
<!-- IUPAC 1 letter nuc acid code -->
      <xs:element name="Seq-data_iupacna">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="IUPACna"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- IUPAC 1 letter amino acid code -->
      <xs:element name="Seq-data_iupacaa">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="IUPACaa"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- 2 bit nucleic acid code -->
      <xs:element name="Seq-data_ncbi2na">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBI2na"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- 4 bit nucleic acid code -->
      <xs:element name="Seq-data_ncbi4na">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBI4na"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- 8 bit extended nucleic acid code -->
      <xs:element name="Seq-data_ncbi8na">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBI8na"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- nucleic acid probabilities -->
      <xs:element name="Seq-data_ncbipna">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBIpna"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- 8 bit extended amino acid codes -->
      <xs:element name="Seq-data_ncbi8aa">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBI8aa"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- extended ASCII 1 letter aa codes -->
      <xs:element name="Seq-data_ncbieaa">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBIeaa"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- amino acid probabilities -->
      <xs:element name="Seq-data_ncbipaa">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBIpaa"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- consecutive codes for std aas -->
      <xs:element name="Seq-data_ncbistdaa">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="NCBIstdaa"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- gap types -->
      <xs:element name="Seq-data_gap">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-gap"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-gap">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-gap_type">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unknown" ncbi:intvalue="0"/>
                    <xs:enumeration value="fragment" ncbi:intvalue="1"/>
                    <xs:enumeration value="clone" ncbi:intvalue="2"/>
                    <xs:enumeration value="short-arm" ncbi:intvalue="3"/>
                    <xs:enumeration value="heterochromatin" ncbi:intvalue="4"/>
                    <xs:enumeration value="centromere" ncbi:intvalue="5"/>
                    <xs:enumeration value="telomere" ncbi:intvalue="6"/>
                    <xs:enumeration value="repeat" ncbi:intvalue="7"/>
                    <xs:enumeration value="contig" ncbi:intvalue="8"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-gap_linkage" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unlinked" ncbi:intvalue="0"/>
                    <xs:enumeration value="linked" ncbi:intvalue="1"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- IUPAC 1 letter codes, no spaces -->
<xs:element name="IUPACna" type="xs:string"/>

<!-- IUPAC 1 letter codes, no spaces -->
<xs:element name="IUPACaa" type="xs:string"/>

<!-- 00=A, 01=C, 10=G, 11=T -->
<xs:element name="NCBI2na" type="xs:hexBinary"/>

<!--
 1 bit each for agct
 0001=A, 0010=C, 0100=G, 1000=T/U
 0101=Purine, 1010=Pyrimidine, etc
-->
<xs:element name="NCBI4na" type="xs:hexBinary"/>

<!-- for modified nucleic acids -->
<xs:element name="NCBI8na" type="xs:hexBinary"/>

<!--
 5 octets/base, prob for a,c,g,t,n
 probabilities are coded 0-255 = 0.0-1.0
-->
<xs:element name="NCBIpna" type="xs:hexBinary"/>

<!-- for modified amino acids -->
<xs:element name="NCBI8aa" type="xs:hexBinary"/>

<!--
 ASCII extended 1 letter aa codes
 IUPAC codes + U=selenocysteine
-->
<xs:element name="NCBIeaa" type="xs:string"/>

<!--
 25 octets/aa, prob for IUPAC aas in order:
 A-Y,B,Z,X,(ter),anything
 probabilities are coded 0-255 = 0.0-1.0
-->
<xs:element name="NCBIpaa" type="xs:hexBinary"/>

<!-- codes 0-25, 1 per byte -->
<xs:element name="NCBIstdaa" type="xs:hexBinary"/>

<!--
*** Sequence Annotation *************************************
*
 This is a replica of Textseq-id
 This is specific for annotations, and exists to maintain a semantic
 difference between IDs assigned to annotations and IDs assigned to
 sequences
-->
<xs:element name="Textannot-id">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Textannot-id_name" type="xs:string" minOccurs="0"/>
      <xs:element name="Textannot-id_accession" type="xs:string" minOccurs="0"/>
      <xs:element name="Textannot-id_release" type="xs:string" minOccurs="0"/>
      <xs:element name="Textannot-id_version" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Annot-id">
  <xs:complexType>
    <xs:choice>
      <xs:element name="Annot-id_local">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Annot-id_ncbi" type="xs:integer"/>
      <xs:element name="Annot-id_general">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Annot-id_other">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textannot-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Annot-descr">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Annotdesc"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Annotdesc">
  <xs:complexType>
    <xs:choice>
<!-- a short name for this collection -->
      <xs:element name="Annotdesc_name" type="xs:string"/>
<!-- a title for this collection -->
      <xs:element name="Annotdesc_title" type="xs:string"/>
<!-- a more extensive comment -->
      <xs:element name="Annotdesc_comment" type="xs:string"/>
<!-- a reference to the publication -->
      <xs:element name="Annotdesc_pub">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pubdesc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- user defined object -->
      <xs:element name="Annotdesc_user">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- date entry first created/released -->
      <xs:element name="Annotdesc_create-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- date of last update -->
      <xs:element name="Annotdesc_update-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- source sequence from which annot came -->
      <xs:element name="Annotdesc_src">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- definition of the SeqAligns -->
      <xs:element name="Annotdesc_align">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Align-def"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- all contents cover this region -->
      <xs:element name="Annotdesc_region">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Align-def">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Align-def_align-type">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    ref	-  set of alignments to the same sequence
    alt	-  set of alternate alignments of the same seqs
    blocks	-  set of aligned blocks in the same seqs
-->
                    <xs:enumeration value="ref" ncbi:intvalue="1"/>
                    <xs:enumeration value="alt" ncbi:intvalue="2"/>
                    <xs:enumeration value="blocks" ncbi:intvalue="3"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- used for the one ref seqid for now -->
      <xs:element name="Align-def_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- features in table form -->
<xs:element name="Seq-annot">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-annot_id" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Annot-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-annot_db" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="genbank" ncbi:intvalue="1"/>
                    <xs:enumeration value="embl" ncbi:intvalue="2"/>
                    <xs:enumeration value="ddbj" ncbi:intvalue="3"/>
                    <xs:enumeration value="pir" ncbi:intvalue="4"/>
                    <xs:enumeration value="sp" ncbi:intvalue="5"/>
                    <xs:enumeration value="bbone" ncbi:intvalue="6"/>
                    <xs:enumeration value="pdb" ncbi:intvalue="7"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- source if "other" above -->
      <xs:element name="Seq-annot_name" type="xs:string" minOccurs="0"/>
<!-- used only for stand alone Seq-annots -->
      <xs:element name="Seq-annot_desc" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Annot-descr"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-annot_data">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Seq-annot_data_ftable">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Seq-feat"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-annot_data_align">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Seq-align"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-annot_data_graph">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Seq-graph"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- used for communication between tools -->
            <xs:element name="Seq-annot_data_ids">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Seq-id"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- used for communication between tools -->
            <xs:element name="Seq-annot_data_locs">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Seq-loc"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-annot_data_seq-table">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Seq-table"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Date">
  <xs:complexType>
    <xs:choice>
<!-- for those unparsed dates -->
      <xs:element name="Date_str" type="xs:string"/>
<!-- use this if you can -->
      <xs:element name="Date_std">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date-std"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- NOTE: this is NOT a unix tm struct -->
<xs:element name="Date-std">
  <xs:complexType>
    <xs:sequence>
<!-- full year (including 1900) -->
      <xs:element name="Date-std_year" type="xs:integer"/>
<!-- month (1-12) -->
      <xs:element name="Date-std_month" type="xs:integer" minOccurs="0"/>
<!-- day of month (1-31) -->
      <xs:element name="Date-std_day" type="xs:integer" minOccurs="0"/>
<!-- for "spring", "may-june", etc -->
      <xs:element name="Date-std_season" type="xs:string" minOccurs="0"/>
<!-- hour of day (0-23) -->
      <xs:element name="Date-std_hour" type="xs:integer" minOccurs="0"/>
<!-- minute of hour (0-59) -->
      <xs:element name="Date-std_minute" type="xs:integer" minOccurs="0"/>
<!-- second of minute (0-59) -->
      <xs:element name="Date-std_second" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Dbtag is generalized for tagging
 eg. { "Social Security", str "023-79-8841" }
 or  { "member", id 8882224 }
-->
<xs:element name="Dbtag">
  <xs:complexType>
    <xs:sequence>
<!-- name of database or system -->
      <xs:element name="Dbtag_db" type="xs:string"/>
<!-- appropriate tag -->
      <xs:element name="Dbtag_tag">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Object-id can tag or name anything

-->
<xs:element name="Object-id">
  <xs:complexType>
    <xs:choice>
      <xs:element name="Object-id_id" type="xs:integer"/>
      <xs:element name="Object-id_str" type="xs:string"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
 Person-id is to define a std element for people

-->
<xs:element name="Person-id">
  <xs:complexType>
    <xs:choice>
<!-- any defined database tag -->
      <xs:element name="Person-id_dbtag">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- structured name -->
      <xs:element name="Person-id_name">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Name-std"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 MEDLINE name (semi-structured)
    eg. "Jones RM"
-->
      <xs:element name="Person-id_ml" type="xs:string"/>
<!-- unstructured name -->
      <xs:element name="Person-id_str" type="xs:string"/>
<!-- consortium name -->
      <xs:element name="Person-id_consortium" type="xs:string"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- Structured names -->
<xs:element name="Name-std">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Name-std_last" type="xs:string"/>
      <xs:element name="Name-std_first" type="xs:string" minOccurs="0"/>
      <xs:element name="Name-std_middle" type="xs:string" minOccurs="0"/>
<!-- full name eg. "J. John Smith, Esq" -->
      <xs:element name="Name-std_full" type="xs:string" minOccurs="0"/>
<!-- first + middle initials -->
      <xs:element name="Name-std_initials" type="xs:string" minOccurs="0"/>
<!-- Jr, Sr, III -->
      <xs:element name="Name-std_suffix" type="xs:string" minOccurs="0"/>
<!-- Dr., Sister, etc -->
      <xs:element name="Name-std_title" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
**** Int-fuzz **********************************************
*
*   uncertainties in integer values
-->
<xs:element name="Int-fuzz">
  <xs:complexType>
    <xs:choice>
<!-- plus or minus fixed amount -->
      <xs:element name="Int-fuzz_p-m" type="xs:integer"/>
      <xs:element name="Int-fuzz_range">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Int-fuzz_range_max" type="xs:integer"/>
            <xs:element name="Int-fuzz_range_min" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- % plus or minus (x10) 0-1000 -->
      <xs:element name="Int-fuzz_pct" type="xs:integer"/>
      <xs:element name="Int-fuzz_lim">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    unk	-  unknown
    gt	-  greater than
    lt	-  less than
    tr	-  space to right of position
    tl	-  space to left of position
    circle	-  artificial break at origin of circle
    other	-  something else
-->
                <xs:enumeration value="unk"/>
                <xs:enumeration value="gt"/>
                <xs:enumeration value="lt"/>
                <xs:enumeration value="tr"/>
                <xs:enumeration value="tl"/>
                <xs:enumeration value="circle"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- set of alternatives for the integer -->
      <xs:element name="Int-fuzz_alt">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Int-fuzz_alt_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
**** User-object **********************************************
*
*   a general object for a user defined structured data item
*    used by Seq-feat and Seq-descr
-->
<xs:element name="User-object">
  <xs:complexType>
    <xs:sequence>
<!-- endeavor which designed this object -->
      <xs:element name="User-object_class" type="xs:string" minOccurs="0"/>
<!-- type of object within class -->
      <xs:element name="User-object_type">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the object itself -->
      <xs:element name="User-object_data">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="User-field"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="User-field">
  <xs:complexType>
    <xs:sequence>
<!-- field label -->
      <xs:element name="User-field_label">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- required for strs, ints, reals, oss -->
      <xs:element name="User-field_num" type="xs:integer" minOccurs="0"/>
      <xs:element name="User-field_data">
        <xs:complexType>
          <xs:choice>
            <xs:element name="User-field_data_str" type="xs:string"/>
            <xs:element name="User-field_data_int" type="xs:integer"/>
            <xs:element name="User-field_data_real" type="xs:double"/>
            <xs:element name="User-field_data_bool">
              <xs:complexType>
                <xs:attribute name="value" use="required">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:enumeration value="true"/>
                      <xs:enumeration value="false"/>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:attribute>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_os" type="xs:hexBinary"/>
<!-- for using other definitions -->
            <xs:element name="User-field_data_object">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="User-object"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_strs">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="User-field_data_strs_E" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_ints">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="User-field_data_ints_E" type="xs:integer"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_reals">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="User-field_data_reals_E" type="xs:double"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_oss">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="User-field_data_oss_E" type="xs:hexBinary"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_fields">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="User-field"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="User-field_data_objects">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="User-object"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="BioSource">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="BioSource_genome" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="unknown">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="unknown" ncbi:intvalue="0"/>
                    <xs:enumeration value="genomic" ncbi:intvalue="1"/>
                    <xs:enumeration value="chloroplast" ncbi:intvalue="2"/>
                    <xs:enumeration value="chromoplast" ncbi:intvalue="3"/>
                    <xs:enumeration value="kinetoplast" ncbi:intvalue="4"/>
                    <xs:enumeration value="mitochondrion" ncbi:intvalue="5"/>
                    <xs:enumeration value="plastid" ncbi:intvalue="6"/>
                    <xs:enumeration value="macronuclear" ncbi:intvalue="7"/>
                    <xs:enumeration value="extrachrom" ncbi:intvalue="8"/>
                    <xs:enumeration value="plasmid" ncbi:intvalue="9"/>
                    <xs:enumeration value="transposon" ncbi:intvalue="10"/>
                    <xs:enumeration value="insertion-seq" ncbi:intvalue="11"/>
                    <xs:enumeration value="cyanelle" ncbi:intvalue="12"/>
                    <xs:enumeration value="proviral" ncbi:intvalue="13"/>
                    <xs:enumeration value="virion" ncbi:intvalue="14"/>
                    <xs:enumeration value="nucleomorph" ncbi:intvalue="15"/>
                    <xs:enumeration value="apicoplast" ncbi:intvalue="16"/>
                    <xs:enumeration value="leucoplast" ncbi:intvalue="17"/>
                    <xs:enumeration value="proplastid" ncbi:intvalue="18"/>
                    <xs:enumeration value="endogenous-virus" ncbi:intvalue="19"/>
                    <xs:enumeration value="hydrogenosome" ncbi:intvalue="20"/>
                    <xs:enumeration value="chromosome" ncbi:intvalue="21"/>
                    <xs:enumeration value="chromatophore" ncbi:intvalue="22"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BioSource_origin" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="unknown">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    natural	-  normal biological entity
    natmut	-  naturally occurring mutant
    mut	-  artificially mutagenized
    artificial	-  artificially engineered
    synthetic	-  purely synthetic
-->
                    <xs:enumeration value="unknown" ncbi:intvalue="0"/>
                    <xs:enumeration value="natural" ncbi:intvalue="1"/>
                    <xs:enumeration value="natmut" ncbi:intvalue="2"/>
                    <xs:enumeration value="mut" ncbi:intvalue="3"/>
                    <xs:enumeration value="artificial" ncbi:intvalue="4"/>
                    <xs:enumeration value="synthetic" ncbi:intvalue="5"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="BioSource_org">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Org-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="BioSource_subtype" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="SubSource"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to distinguish biological focus -->
      <xs:element name="BioSource_is-focus" minOccurs="0">
        <xs:complexType/>
      </xs:element>
      <xs:element name="BioSource_pcr-primers" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PCRReactionSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PCRReactionSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="PCRReaction"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PCRReaction">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="PCRReaction_forward" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PCRPrimerSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PCRReaction_reverse" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PCRPrimerSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PCRPrimerSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="PCRPrimer"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PCRPrimer">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="PCRPrimer_seq" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PCRPrimerSeq"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PCRPrimer_name" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PCRPrimerName"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PCRPrimerSeq" type="xs:string"/>

<xs:element name="PCRPrimerName" type="xs:string"/>

<xs:element name="SubSource">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="SubSource_subtype">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    lat-lon	-  +/- decimal degrees
    collection-date	-  DD-MMM-YYYY format
    collected-by	-  name of person who collected the sample
    identified-by	-  name of person who identified the sample
    fwd-primer-seq	-  sequence (possibly more than one; semicolon-separated)
    rev-primer-seq	-  sequence (possibly more than one; semicolon-separated)
-->
                    <xs:enumeration value="chromosome" ncbi:intvalue="1"/>
                    <xs:enumeration value="map" ncbi:intvalue="2"/>
                    <xs:enumeration value="clone" ncbi:intvalue="3"/>
                    <xs:enumeration value="subclone" ncbi:intvalue="4"/>
                    <xs:enumeration value="haplotype" ncbi:intvalue="5"/>
                    <xs:enumeration value="genotype" ncbi:intvalue="6"/>
                    <xs:enumeration value="sex" ncbi:intvalue="7"/>
                    <xs:enumeration value="cell-line" ncbi:intvalue="8"/>
                    <xs:enumeration value="cell-type" ncbi:intvalue="9"/>
                    <xs:enumeration value="tissue-type" ncbi:intvalue="10"/>
                    <xs:enumeration value="clone-lib" ncbi:intvalue="11"/>
                    <xs:enumeration value="dev-stage" ncbi:intvalue="12"/>
                    <xs:enumeration value="frequency" ncbi:intvalue="13"/>
                    <xs:enumeration value="germline" ncbi:intvalue="14"/>
                    <xs:enumeration value="rearranged" ncbi:intvalue="15"/>
                    <xs:enumeration value="lab-host" ncbi:intvalue="16"/>
                    <xs:enumeration value="pop-variant" ncbi:intvalue="17"/>
                    <xs:enumeration value="tissue-lib" ncbi:intvalue="18"/>
                    <xs:enumeration value="plasmid-name" ncbi:intvalue="19"/>
                    <xs:enumeration value="transposon-name" ncbi:intvalue="20"/>
                    <xs:enumeration value="insertion-seq-name" ncbi:intvalue="21"/>
                    <xs:enumeration value="plastid-name" ncbi:intvalue="22"/>
                    <xs:enumeration value="country" ncbi:intvalue="23"/>
                    <xs:enumeration value="segment" ncbi:intvalue="24"/>
                    <xs:enumeration value="endogenous-virus-name" ncbi:intvalue="25"/>
                    <xs:enumeration value="transgenic" ncbi:intvalue="26"/>
                    <xs:enumeration value="environmental-sample" ncbi:intvalue="27"/>
                    <xs:enumeration value="isolation-source" ncbi:intvalue="28"/>
                    <xs:enumeration value="lat-lon" ncbi:intvalue="29"/>
                    <xs:enumeration value="collection-date" ncbi:intvalue="30"/>
                    <xs:enumeration value="collected-by" ncbi:intvalue="31"/>
                    <xs:enumeration value="identified-by" ncbi:intvalue="32"/>
                    <xs:enumeration value="fwd-primer-seq" ncbi:intvalue="33"/>
                    <xs:enumeration value="rev-primer-seq" ncbi:intvalue="34"/>
                    <xs:enumeration value="fwd-primer-name" ncbi:intvalue="35"/>
                    <xs:enumeration value="rev-primer-name" ncbi:intvalue="36"/>
                    <xs:enumeration value="metagenomic" ncbi:intvalue="37"/>
                    <xs:enumeration value="mating-type" ncbi:intvalue="38"/>
                    <xs:enumeration value="linkage-group" ncbi:intvalue="39"/>
                    <xs:enumeration value="haplogroup" ncbi:intvalue="40"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="SubSource_name" type="xs:string"/>
<!-- attribution/source of this name -->
      <xs:element name="SubSource_attrib" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:element name="Seq-id">
  <xs:complexType>
    <xs:choice>
<!-- local use -->
      <xs:element name="Seq-id_local">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Geninfo backbone seqid -->
      <xs:element name="Seq-id_gibbsq" type="xs:integer"/>
<!-- Geninfo backbone moltype -->
      <xs:element name="Seq-id_gibbmt" type="xs:integer"/>
<!-- Geninfo import id -->
      <xs:element name="Seq-id_giim">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Giimport-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-id_genbank">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-id_embl">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-id_pir">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-id_swissprot">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-id_patent">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Patent-seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for historical reasons, 'other' = 'refseq' -->
      <xs:element name="Seq-id_other">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for other databases -->
      <xs:element name="Seq-id_general">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- GenInfo Integrated Database -->
      <xs:element name="Seq-id_gi" type="xs:integer"/>
<!-- DDBJ -->
      <xs:element name="Seq-id_ddbj">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- PRF SEQDB -->
      <xs:element name="Seq-id_prf">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- PDB sequence -->
      <xs:element name="Seq-id_pdb">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PDB-seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Third Party Annot/Seq Genbank -->
      <xs:element name="Seq-id_tpg">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Third Party Annot/Seq EMBL -->
      <xs:element name="Seq-id_tpe">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Third Party Annot/Seq DDBJ -->
      <xs:element name="Seq-id_tpd">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Internal NCBI genome pipeline processing ID -->
      <xs:element name="Seq-id_gpipe">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Internal named annotation tracking ID -->
      <xs:element name="Seq-id_named-annot-track">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Textseq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Patent-seq-id">
  <xs:complexType>
    <xs:sequence>
<!-- number of sequence in patent -->
      <xs:element name="Patent-seq-id_seqid" type="xs:integer"/>
<!-- patent citation -->
      <xs:element name="Patent-seq-id_cit">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Id-pat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Textseq-id">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Textseq-id_name" type="xs:string" minOccurs="0"/>
      <xs:element name="Textseq-id_accession" type="xs:string" minOccurs="0"/>
      <xs:element name="Textseq-id_release" type="xs:string" minOccurs="0"/>
      <xs:element name="Textseq-id_version" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Giimport-id">
  <xs:complexType>
    <xs:sequence>
<!-- the id to use here -->
      <xs:element name="Giimport-id_id" type="xs:integer"/>
<!-- dbase used in -->
      <xs:element name="Giimport-id_db" type="xs:string" minOccurs="0"/>
<!-- the release -->
      <xs:element name="Giimport-id_release" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PDB-seq-id">
  <xs:complexType>
    <xs:sequence>
<!-- the molecule name -->
      <xs:element name="PDB-seq-id_mol">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PDB-mol-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a single ASCII character, chain id -->
      <xs:element name="PDB-seq-id_chain" type="xs:integer" default="32"/>
<!-- release date, month and year -->
      <xs:element name="PDB-seq-id_rel" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- name of mol, 4 chars -->
<xs:element name="PDB-mol-id" type="xs:string"/>

<!--
*** Sequence locations **********************************
*
-->
<xs:element name="Seq-loc">
  <xs:complexType>
    <xs:choice>
<!-- not placed -->
      <xs:element name="Seq-loc_null">
        <xs:complexType/>
      </xs:element>
<!-- to NULL one Seq-id in a collection -->
      <xs:element name="Seq-loc_empty">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- whole sequence -->
      <xs:element name="Seq-loc_whole">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- from to -->
      <xs:element name="Seq-loc_int">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-interval"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-loc_packed-int">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Packed-seqint"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-loc_pnt">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-point"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-loc_packed-pnt">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Packed-seqpnt"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-loc_mix">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc-mix"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- equivalent sets of locations -->
      <xs:element name="Seq-loc_equiv">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc-equiv"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-loc_bond">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-bond"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- indirect, through a Seq-feat -->
      <xs:element name="Seq-loc_feat">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Feat-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-interval">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-interval_from" type="xs:integer"/>
      <xs:element name="Seq-interval_to" type="xs:integer"/>
      <xs:element name="Seq-interval_strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- WARNING: this used to be optional -->
      <xs:element name="Seq-interval_id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-interval_fuzz-from" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Int-fuzz"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-interval_fuzz-to" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Int-fuzz"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Packed-seqint">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seq-interval"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-point">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-point_point" type="xs:integer"/>
      <xs:element name="Seq-point_strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- WARNING: this used to be optional -->
      <xs:element name="Seq-point_id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-point_fuzz" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Int-fuzz"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Packed-seqpnt">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Packed-seqpnt_strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Packed-seqpnt_id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Packed-seqpnt_fuzz" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Int-fuzz"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Packed-seqpnt_points">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Packed-seqpnt_points_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- strand of nucleic acid -->
<xs:element name="Na-strand">
  <xs:complexType>
    <xs:attribute name="value" use="required">
      <xs:simpleType>
        <xs:restriction base="xs:string">
<!--
    both	-  in forward orientation
    both-rev	-  in reverse orientation
-->
          <xs:enumeration value="unknown"/>
          <xs:enumeration value="plus"/>
          <xs:enumeration value="minus"/>
          <xs:enumeration value="both"/>
          <xs:enumeration value="both-rev"/>
          <xs:enumeration value="other"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
</xs:element>

<!-- bond between residues -->
<xs:element name="Seq-bond">
  <xs:complexType>
    <xs:sequence>
<!-- connection to a least one residue -->
      <xs:element name="Seq-bond_a">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-point"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- other end may not be available -->
      <xs:element name="Seq-bond_b" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-point"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- this will hold anything -->
<xs:element name="Seq-loc-mix">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seq-loc"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- for a set of equivalent locations -->
<xs:element name="Seq-loc-equiv">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seq-loc"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:element name="ArticleId">
  <xs:complexType>
    <xs:choice>
<!-- see types below -->
      <xs:element name="ArticleId_pubmed">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubMedId"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ArticleId_medline">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="MedlineUID"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ArticleId_doi">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="DOI"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ArticleId_pii">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PII"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ArticleId_pmcid">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PmcID"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ArticleId_pmcpid">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PmcPid"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ArticleId_pmpid">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PmPid"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- generic catch all -->
      <xs:element name="ArticleId_other">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- Id from the PubMed database at NCBI -->
<xs:element name="PubMedId" type="xs:integer"/>

<!-- Id from MEDLINE -->
<xs:element name="MedlineUID" type="xs:integer"/>

<!-- Document Object Identifier -->
<xs:element name="DOI" type="xs:string"/>

<!-- Controlled Publisher Identifier -->
<xs:element name="PII" type="xs:string"/>

<!-- PubMed Central Id -->
<xs:element name="PmcID" type="xs:integer"/>

<!-- Publisher Id supplied to PubMed Central -->
<xs:element name="PmcPid" type="xs:string"/>

<!-- Publisher Id supplied to PubMed -->
<xs:element name="PmPid" type="xs:string"/>

<xs:element name="ArticleIdSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="ArticleId"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Status Dates
 points of publication
-->
<xs:element name="PubStatus">
  <xs:complexType>
    <xs:simpleContent>
      <xs:extension base="xs:integer">
        <xs:attribute name="value" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:string">
<!--
    received	-  date manuscript received for review
    accepted	-  accepted for publication
    epublish	-  published electronically by publisher
    ppublish	-  published in print by publisher
    revised	-  article revised by publisher/author
    pmc	-  article first appeared in PubMed Central
    pmcr	-  article revision in PubMed Central
    pubmed	-  article citation first appeared in PubMed
    pubmedr	-  article citation revision in PubMed
    aheadofprint	-  epublish, but will be followed by print
    premedline	-  date into PreMedline status
    medline	-  date made a MEDLINE record
-->
              <xs:enumeration value="received" ncbi:intvalue="1"/>
              <xs:enumeration value="accepted" ncbi:intvalue="2"/>
              <xs:enumeration value="epublish" ncbi:intvalue="3"/>
              <xs:enumeration value="ppublish" ncbi:intvalue="4"/>
              <xs:enumeration value="revised" ncbi:intvalue="5"/>
              <xs:enumeration value="pmc" ncbi:intvalue="6"/>
              <xs:enumeration value="pmcr" ncbi:intvalue="7"/>
              <xs:enumeration value="pubmed" ncbi:intvalue="8"/>
              <xs:enumeration value="pubmedr" ncbi:intvalue="9"/>
              <xs:enumeration value="aheadofprint" ncbi:intvalue="10"/>
              <xs:enumeration value="premedline" ncbi:intvalue="11"/>
              <xs:enumeration value="medline" ncbi:intvalue="12"/>
              <xs:enumeration value="other" ncbi:intvalue="255"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
</xs:element>

<!-- done as a structure so fields can be added -->
<xs:element name="PubStatusDate">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="PubStatusDate_pubstatus">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubStatus"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- time may be added later -->
      <xs:element name="PubStatusDate_date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PubStatusDateSet">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="PubStatusDate"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Citation Types
 article in journal or book
-->
<xs:element name="Cit-art">
  <xs:complexType>
    <xs:sequence>
<!-- title of paper (ANSI requires) -->
      <xs:element name="Cit-art_title" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Title"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- authors (ANSI requires) -->
      <xs:element name="Cit-art_authors" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cit-art_from">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Cit-art_from_journal">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Cit-jour"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Cit-art_from_book">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Cit-book"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Cit-art_from_proc">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Cit-proc"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
<!-- lots of ids -->
      <xs:element name="Cit-art_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="ArticleIdSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Journal citation -->
<xs:element name="Cit-jour">
  <xs:complexType>
    <xs:sequence>
<!-- title of journal -->
      <xs:element name="Cit-jour_title">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Title"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cit-jour_imp">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Imprint"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Book citation -->
<xs:element name="Cit-book">
  <xs:complexType>
    <xs:sequence>
<!-- Title of book -->
      <xs:element name="Cit-book_title">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Title"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- part of a collection -->
      <xs:element name="Cit-book_coll" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Title"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- authors -->
      <xs:element name="Cit-book_authors">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cit-book_imp">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Imprint"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Meeting proceedings -->
<xs:element name="Cit-proc">
  <xs:complexType>
    <xs:sequence>
<!-- citation to meeting -->
      <xs:element name="Cit-proc_book">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-book"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- time and location of meeting -->
      <xs:element name="Cit-proc_meet">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Meeting"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Patent number and date-issue were made optional in 1997 to
   support patent applications being issued from the USPTO
   Semantically a Cit-pat must have either a patent number or
   an application number (or both) to be valid
 patent citation
-->
<xs:element name="Cit-pat">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Cit-pat_title" type="xs:string"/>
<!-- author/inventor -->
      <xs:element name="Cit-pat_authors">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Patent Document Country -->
      <xs:element name="Cit-pat_country" type="xs:string"/>
<!-- Patent Document Type -->
      <xs:element name="Cit-pat_doc-type" type="xs:string"/>
<!-- Patent Document Number -->
      <xs:element name="Cit-pat_number" type="xs:string" minOccurs="0"/>
<!-- Patent Issue/Pub Date -->
      <xs:element name="Cit-pat_date-issue" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Patent Doc Class Code  -->
      <xs:element name="Cit-pat_class" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Cit-pat_class_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Patent Doc Appl Number -->
      <xs:element name="Cit-pat_app-number" type="xs:string" minOccurs="0"/>
<!-- Patent Appl File Date -->
      <xs:element name="Cit-pat_app-date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Applicants -->
      <xs:element name="Cit-pat_applicants" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Assignees -->
      <xs:element name="Cit-pat_assignees" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Priorities -->
      <xs:element name="Cit-pat_priority" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Patent-priority"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- abstract of patent -->
      <xs:element name="Cit-pat_abstract" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Patent-priority">
  <xs:complexType>
    <xs:sequence>
<!-- Patent country code -->
      <xs:element name="Patent-priority_country" type="xs:string"/>
<!-- number assigned in that country -->
      <xs:element name="Patent-priority_number" type="xs:string"/>
<!-- date of application -->
      <xs:element name="Patent-priority_date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- just to identify a patent -->
<xs:element name="Id-pat">
  <xs:complexType>
    <xs:sequence>
<!-- Patent Document Country -->
      <xs:element name="Id-pat_country" type="xs:string"/>
      <xs:element name="Id-pat_id">
        <xs:complexType>
          <xs:choice>
<!-- Patent Document Number -->
            <xs:element name="Id-pat_id_number" type="xs:string"/>
<!-- Patent Doc Appl Number -->
            <xs:element name="Id-pat_id_app-number" type="xs:string"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
<!-- Patent Doc Type -->
      <xs:element name="Id-pat_doc-type" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- letter, thesis, or manuscript -->
<xs:element name="Cit-let">
  <xs:complexType>
    <xs:sequence>
<!-- same fields as a book -->
      <xs:element name="Cit-let_cit">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-book"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- Manuscript identifier -->
      <xs:element name="Cit-let_man-id" type="xs:string" minOccurs="0"/>
      <xs:element name="Cit-let_type" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="manuscript"/>
                <xs:enumeration value="letter"/>
                <xs:enumeration value="thesis"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 NOTE: this is just to cite a
 direct data submission, see NCBI-Submit
 for the form of a sequence submission
 citation for a direct submission
-->
<xs:element name="Cit-sub">
  <xs:complexType>
    <xs:sequence>
<!-- not necessarily authors of the paper -->
      <xs:element name="Cit-sub_authors">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- this only used to get date.. will go -->
      <xs:element name="Cit-sub_imp" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Imprint"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cit-sub_medium" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="paper"/>
                <xs:enumeration value="tape"/>
                <xs:enumeration value="floppy"/>
                <xs:enumeration value="email"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- replaces imp, will become required -->
      <xs:element name="Cit-sub_date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- description of changes for public view -->
      <xs:element name="Cit-sub_descr" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- NOT from ANSI, this is a catchall -->
<xs:element name="Cit-gen">
  <xs:complexType>
    <xs:sequence>
<!-- anything, not parsable -->
      <xs:element name="Cit-gen_cit" type="xs:string" minOccurs="0"/>
      <xs:element name="Cit-gen_authors" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Auth-list"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- medline uid -->
      <xs:element name="Cit-gen_muid" type="xs:integer" minOccurs="0"/>
      <xs:element name="Cit-gen_journal" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Title"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cit-gen_volume" type="xs:string" minOccurs="0"/>
      <xs:element name="Cit-gen_issue" type="xs:string" minOccurs="0"/>
      <xs:element name="Cit-gen_pages" type="xs:string" minOccurs="0"/>
      <xs:element name="Cit-gen_date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for GenBank style references -->
      <xs:element name="Cit-gen_serial-number" type="xs:integer" minOccurs="0"/>
<!-- eg. cit="unpublished",title="title" -->
      <xs:element name="Cit-gen_title" type="xs:string" minOccurs="0"/>
<!-- PubMed Id -->
      <xs:element name="Cit-gen_pmid" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubMedId"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Authorship Group -->
<xs:element name="Auth-list">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Auth-list_names">
        <xs:complexType>
          <xs:choice>
<!-- full citations -->
            <xs:element name="Auth-list_names_std">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Author"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- MEDLINE, semi-structured -->
            <xs:element name="Auth-list_names_ml">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="Auth-list_names_ml_E" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- free for all -->
            <xs:element name="Auth-list_names_str">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="Auth-list_names_str_E" type="xs:string"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
<!-- author affiliation -->
      <xs:element name="Auth-list_affil" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Affil"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Author">
  <xs:complexType>
    <xs:sequence>
<!-- Author, Primary or Secondary -->
      <xs:element name="Author_name">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Person-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Author_level" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="primary"/>
                <xs:enumeration value="secondary"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Author_role" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="compiler"/>
                <xs:enumeration value="editor"/>
                <xs:enumeration value="patent-assignee"/>
                <xs:enumeration value="translator"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Author_affil" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Affil"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- TRUE if corresponding author -->
      <xs:element name="Author_is-corr" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Affil">
  <xs:complexType>
    <xs:choice>
<!-- unparsed string -->
      <xs:element name="Affil_str" type="xs:string"/>
      <xs:element name="Affil_std">
        <xs:complexType>
          <xs:sequence>
<!-- Author Affiliation, Name -->
            <xs:element name="Affil_std_affil" type="xs:string" minOccurs="0"/>
<!-- Author Affiliation, Division -->
            <xs:element name="Affil_std_div" type="xs:string" minOccurs="0"/>
<!-- Author Affiliation, City -->
            <xs:element name="Affil_std_city" type="xs:string" minOccurs="0"/>
<!-- Author Affiliation, County Sub -->
            <xs:element name="Affil_std_sub" type="xs:string" minOccurs="0"/>
<!-- Author Affiliation, Country -->
            <xs:element name="Affil_std_country" type="xs:string" minOccurs="0"/>
<!-- street address, not ANSI -->
            <xs:element name="Affil_std_street" type="xs:string" minOccurs="0"/>
            <xs:element name="Affil_std_email" type="xs:string" minOccurs="0"/>
            <xs:element name="Affil_std_fax" type="xs:string" minOccurs="0"/>
            <xs:element name="Affil_std_phone" type="xs:string" minOccurs="0"/>
            <xs:element name="Affil_std_postal-code" type="xs:string" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
 Title Group
 Valid for = A = Analytic (Cit-art)
             J = Journals (Cit-jour)
             B = Book (Cit-book)
 Valid for:
-->
<xs:element name="Title">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="Title_E">
        <xs:complexType>
          <xs:choice>
<!-- Title, Anal,Coll,Mono    AJB -->
            <xs:element name="Title_E_name" type="xs:string"/>
<!-- Title, Subordinate       A B -->
            <xs:element name="Title_E_tsub" type="xs:string"/>
<!-- Title, Translated        AJB -->
            <xs:element name="Title_E_trans" type="xs:string"/>
<!-- Title, Abbreviated        J -->
            <xs:element name="Title_E_jta" type="xs:string"/>
<!-- specifically ISO jta      J -->
            <xs:element name="Title_E_iso-jta" type="xs:string"/>
<!-- specifically MEDLINE jta  J -->
            <xs:element name="Title_E_ml-jta" type="xs:string"/>
<!-- a coden                   J -->
            <xs:element name="Title_E_coden" type="xs:string"/>
<!-- ISSN                      J -->
            <xs:element name="Title_E_issn" type="xs:string"/>
<!-- Title, Abbreviated         B -->
            <xs:element name="Title_E_abr" type="xs:string"/>
<!-- ISBN                       B -->
            <xs:element name="Title_E_isbn" type="xs:string"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Imprint group -->
<xs:element name="Imprint">
  <xs:complexType>
    <xs:sequence>
<!-- date of publication -->
      <xs:element name="Imprint_date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Imprint_volume" type="xs:string" minOccurs="0"/>
      <xs:element name="Imprint_issue" type="xs:string" minOccurs="0"/>
      <xs:element name="Imprint_pages" type="xs:string" minOccurs="0"/>
      <xs:element name="Imprint_section" type="xs:string" minOccurs="0"/>
<!-- publisher, required for book -->
      <xs:element name="Imprint_pub" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Affil"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- copyright date, "    "   " -->
      <xs:element name="Imprint_cprt" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- part/sup of volume -->
      <xs:element name="Imprint_part-sup" type="xs:string" minOccurs="0"/>
<!-- put here for simplicity -->
      <xs:element name="Imprint_language" type="xs:string" default="ENG"/>
      <xs:element name="Imprint_prepub" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    submitted	-  submitted, not accepted
    in-press	-  accepted, not published
-->
                <xs:enumeration value="submitted"/>
                <xs:enumeration value="in-press"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- part/sup on issue -->
      <xs:element name="Imprint_part-supi" type="xs:string" minOccurs="0"/>
<!-- retraction info -->
      <xs:element name="Imprint_retract" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="CitRetract"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- current status of this publication -->
      <xs:element name="Imprint_pubstatus" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubStatus"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- dates for this record -->
      <xs:element name="Imprint_history" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubStatusDateSet"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="CitRetract">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="CitRetract_type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    retracted	-  this citation retracted
    notice	-  this citation is a retraction notice
    in-error	-  an erratum was published about this
    erratum	-  this is a published erratum
-->
                <xs:enumeration value="retracted"/>
                <xs:enumeration value="notice"/>
                <xs:enumeration value="in-error"/>
                <xs:enumeration value="erratum"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- citation and/or explanation -->
      <xs:element name="CitRetract_exp" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Meeting">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Meeting_number" type="xs:string"/>
      <xs:element name="Meeting_date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Meeting_place" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Affil"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Feat-id">
  <xs:complexType>
    <xs:choice>
<!-- geninfo backbone -->
      <xs:element name="Feat-id_gibb" type="xs:integer"/>
<!-- geninfo import -->
      <xs:element name="Feat-id_giim">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Giimport-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for local software use -->
      <xs:element name="Feat-id_local">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for use by various databases -->
      <xs:element name="Feat-id_general">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
*** Seq-feat *******************************************
*  sequence feature generalization
-->
<xs:element name="Seq-feat">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-feat_id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Feat-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the specific data -->
      <xs:element name="Seq-feat_data">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqFeatData"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- incomplete in some way? -->
      <xs:element name="Seq-feat_partial" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- something funny about this? -->
      <xs:element name="Seq-feat_except" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-feat_comment" type="xs:string" minOccurs="0"/>
<!-- product of process -->
      <xs:element name="Seq-feat_product" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- feature made from -->
      <xs:element name="Seq-feat_location">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- qualifiers -->
      <xs:element name="Seq-feat_qual" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Gb-qual"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- for user defined label -->
      <xs:element name="Seq-feat_title" type="xs:string" minOccurs="0"/>
<!-- user defined structure extension -->
      <xs:element name="Seq-feat_ext" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- citations for this feature -->
      <xs:element name="Seq-feat_cit" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-feat_exp-ev" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    experimental	-  any reasonable experimental check
    not-experimental	-  similarity, pattern, etc
-->
                <xs:enumeration value="experimental"/>
                <xs:enumeration value="not-experimental"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- cite other relevant features -->
      <xs:element name="Seq-feat_xref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="SeqFeatXref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- support for xref to other databases -->
      <xs:element name="Seq-feat_dbxref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- annotated on pseudogene? -->
      <xs:element name="Seq-feat_pseudo" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- explain if except=TRUE -->
      <xs:element name="Seq-feat_except-text" type="xs:string" minOccurs="0"/>
<!-- set of Ids; will replace 'id' field -->
      <xs:element name="Seq-feat_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Feat-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- set of extensions; will replace 'ext' field -->
      <xs:element name="Seq-feat_exts" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="SeqFeatData">
  <xs:complexType>
    <xs:choice>
      <xs:element name="SeqFeatData_gene">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Gene-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_org">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Org-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_cdregion">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cdregion"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_prot">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Prot-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_rna">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="RNA-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- publication applies to this seq  -->
      <xs:element name="SeqFeatData_pub">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pubdesc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to annotate origin from another seq -->
      <xs:element name="SeqFeatData_seq">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_imp">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Imp-feat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- named region (globin locus) -->
      <xs:element name="SeqFeatData_region" type="xs:string"/>
<!-- just a comment -->
      <xs:element name="SeqFeatData_comment">
        <xs:complexType/>
      </xs:element>
      <xs:element name="SeqFeatData_bond">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="disulfide"/>
                <xs:enumeration value="thiolester"/>
                <xs:enumeration value="xlink"/>
                <xs:enumeration value="thioether"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_site">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="active"/>
                <xs:enumeration value="binding"/>
                <xs:enumeration value="cleavage"/>
                <xs:enumeration value="inhibit"/>
                <xs:enumeration value="modified"/>
                <xs:enumeration value="glycosylation"/>
                <xs:enumeration value="myristoylation"/>
                <xs:enumeration value="mutagenized"/>
                <xs:enumeration value="metal-binding"/>
                <xs:enumeration value="phosphorylation"/>
                <xs:enumeration value="acetylation"/>
                <xs:enumeration value="amidation"/>
                <xs:enumeration value="methylation"/>
                <xs:enumeration value="hydroxylation"/>
                <xs:enumeration value="sulfatation"/>
                <xs:enumeration value="oxidative-deamination"/>
                <xs:enumeration value="pyrrolidone-carboxylic-acid"/>
                <xs:enumeration value="gamma-carboxyglutamic-acid"/>
                <xs:enumeration value="blocked"/>
                <xs:enumeration value="lipid-binding"/>
                <xs:enumeration value="np-binding"/>
                <xs:enumeration value="dna-binding"/>
                <xs:enumeration value="signal-peptide"/>
                <xs:enumeration value="transit-peptide"/>
                <xs:enumeration value="transmembrane-region"/>
                <xs:enumeration value="nitrosylation"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- restriction site  (for maps really) -->
      <xs:element name="SeqFeatData_rsite">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Rsite-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- user defined structure -->
      <xs:element name="SeqFeatData_user">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- transcription initiation -->
      <xs:element name="SeqFeatData_txinit">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Txinit"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a numbering system -->
      <xs:element name="SeqFeatData_num">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Numbering"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_psec-str">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    helix	-  any helix
    sheet	-  beta sheet
    turn	-  beta or gamma turn
-->
                <xs:enumeration value="helix"/>
                <xs:enumeration value="sheet"/>
                <xs:enumeration value="turn"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- non-standard residue here in seq -->
      <xs:element name="SeqFeatData_non-std-residue" type="xs:string"/>
<!-- cofactor, prosthetic grp, etc, bound to seq -->
      <xs:element name="SeqFeatData_het">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Heterogen"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqFeatData_biosrc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="BioSource"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- both optional because can have one or both -->
<xs:element name="SeqFeatXref">
  <xs:complexType>
    <xs:sequence>
<!-- the feature copied -->
      <xs:element name="SeqFeatXref_id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Feat-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- the specific data -->
      <xs:element name="SeqFeatXref_data" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqFeatData"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
*** CdRegion ***********************************************
*
*  Instructions to translate from a nucleic acid to a peptide
*    conflict means it's supposed to translate but doesn't
*
-->
<xs:element name="Cdregion">
  <xs:complexType>
    <xs:sequence>
<!-- just an ORF ? -->
      <xs:element name="Cdregion_orf" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Cdregion_frame" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="not-set">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    not-set	-  not set, code uses one
    three	-  reading frame
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="one"/>
                <xs:enumeration value="two"/>
                <xs:enumeration value="three"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- conflict -->
      <xs:element name="Cdregion_conflict" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- number of gaps on conflict/except -->
      <xs:element name="Cdregion_gaps" type="xs:integer" minOccurs="0"/>
<!-- number of mismatches on above -->
      <xs:element name="Cdregion_mismatch" type="xs:integer" minOccurs="0"/>
<!-- genetic code used -->
      <xs:element name="Cdregion_code" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Genetic-code"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- individual exceptions -->
      <xs:element name="Cdregion_code-break" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Code-break"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- number of stop codons on above -->
      <xs:element name="Cdregion_stops" type="xs:integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 each code is 64 cells long, in the order where
 T=0,C=1,A=2,G=3, TTT=0, TTC=1, TCA=4, etc
 NOTE: this order does NOT correspond to a Seq-data
 encoding.  It is "natural" to codon usage instead.
 the value in each cell is the AA coded for
 start= AA coded only if first in peptide
   in start array, if codon is not a legitimate start
   codon, that cell will have the "gap" symbol for
   that alphabet.  Otherwise it will have the AA
   encoded when that codon is used at the start.
-->
<xs:element name="Genetic-code">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="Genetic-code_E">
        <xs:complexType>
          <xs:choice>
<!-- name of a code -->
            <xs:element name="Genetic-code_E_name" type="xs:string"/>
<!-- id in dbase -->
            <xs:element name="Genetic-code_E_id" type="xs:integer"/>
<!-- indexed to IUPAC extended -->
            <xs:element name="Genetic-code_E_ncbieaa" type="xs:string"/>
<!-- indexed to NCBI8aa -->
            <xs:element name="Genetic-code_E_ncbi8aa" type="xs:hexBinary"/>
<!-- indexed to NCBIstdaa -->
            <xs:element name="Genetic-code_E_ncbistdaa" type="xs:hexBinary"/>
<!-- start, indexed to IUPAC extended -->
            <xs:element name="Genetic-code_E_sncbieaa" type="xs:string"/>
<!-- start, indexed to NCBI8aa -->
            <xs:element name="Genetic-code_E_sncbi8aa" type="xs:hexBinary"/>
<!-- start, indexed to NCBIstdaa -->
            <xs:element name="Genetic-code_E_sncbistdaa" type="xs:hexBinary"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 specific codon exceptions
 NCBIstdaa code
-->
<xs:element name="Code-break">
  <xs:complexType>
    <xs:sequence>
<!-- location of exception -->
      <xs:element name="Code-break_loc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Code-break_aa">
        <xs:complexType>
          <xs:choice>
<!-- ASCII value of NCBIeaa code -->
            <xs:element name="Code-break_aa_ncbieaa" type="xs:integer"/>
<!-- NCBI8aa code -->
            <xs:element name="Code-break_aa_ncbi8aa" type="xs:integer"/>
            <xs:element name="Code-break_aa_ncbistdaa" type="xs:integer"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- table of genetic codes -->
<xs:element name="Genetic-code-table">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Genetic-code"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
*** Import ***********************************************
*
*  Features imported from other databases
*
-->
<xs:element name="Imp-feat">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Imp-feat_key" type="xs:string"/>
<!-- original location string -->
      <xs:element name="Imp-feat_loc" type="xs:string" minOccurs="0"/>
<!-- text description -->
      <xs:element name="Imp-feat_descr" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Gb-qual">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Gb-qual_qual" type="xs:string"/>
      <xs:element name="Gb-qual_val" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="RNA-ref">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="RNA-ref_type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    snRNA	-  will become ncRNA, with RNA-gen.class = snRNA
    scRNA	-  will become ncRNA, with RNA-gen.class = scRNA
    snoRNA	-  will become ncRNA, with RNA-gen.class = snoRNA
    ncRNA	-  non-coding RNA; subsumes snRNA, scRNA, snoRNA
-->
                <xs:enumeration value="unknown"/>
                <xs:enumeration value="premsg"/>
                <xs:enumeration value="mRNA"/>
                <xs:enumeration value="tRNA"/>
                <xs:enumeration value="rRNA"/>
                <xs:enumeration value="snRNA"/>
                <xs:enumeration value="scRNA"/>
                <xs:enumeration value="snoRNA"/>
                <xs:enumeration value="ncRNA"/>
                <xs:enumeration value="tmRNA"/>
                <xs:enumeration value="miscRNA"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="RNA-ref_pseudo" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- generic fields for ncRNA, tmRNA, miscRNA -->
      <xs:element name="RNA-ref_ext" minOccurs="0">
        <xs:complexType>
          <xs:choice>
<!-- for naming "other" type -->
            <xs:element name="RNA-ref_ext_name" type="xs:string"/>
<!-- for tRNAs -->
            <xs:element name="RNA-ref_ext_tRNA">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Trna-ext"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="RNA-ref_ext_gen">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="RNA-gen"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- tRNA feature extensions -->
<xs:element name="Trna-ext">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Trna-ext_aa" minOccurs="0">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Trna-ext_aa_iupacaa" type="xs:integer"/>
            <xs:element name="Trna-ext_aa_ncbieaa" type="xs:integer"/>
            <xs:element name="Trna-ext_aa_ncbi8aa" type="xs:integer"/>
            <xs:element name="Trna-ext_aa_ncbistdaa" type="xs:integer"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
<!-- codon(s) as in Genetic-code -->
      <xs:element name="Trna-ext_codon" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Trna-ext_codon_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- location of anticodon -->
      <xs:element name="Trna-ext_anticodon" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="RNA-gen">
  <xs:complexType>
    <xs:sequence>
<!--
 for ncRNAs, the class of non-coding RNA:
 examples: antisense_RNA, guide_RNA, snRNA
-->
      <xs:element name="RNA-gen_class" type="xs:string" minOccurs="0"/>
      <xs:element name="RNA-gen_product" type="xs:string" minOccurs="0"/>
<!-- e.g., tag_peptide qualifier for tmRNAs -->
      <xs:element name="RNA-gen_quals" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="RNA-qual-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- Additional data values for RNA-gen, -->
<xs:element name="RNA-qual">
  <xs:complexType>
    <xs:sequence>
<!-- in a tag (qual), value (val) format -->
      <xs:element name="RNA-qual_qual" type="xs:string"/>
      <xs:element name="RNA-qual_val" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="RNA-qual-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="RNA-qual"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Rsite-ref">
  <xs:complexType>
    <xs:choice>
<!-- may be unparsable -->
      <xs:element name="Rsite-ref_str" type="xs:string"/>
<!-- pointer to a restriction site database -->
      <xs:element name="Rsite-ref_db">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="SP-block">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="SP-block_class">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    standard	-  conforms to all SWISSPROT checks
    prelim	-  only seq and biblio checked
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="standard"/>
                <xs:enumeration value="prelim"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- old SWISSPROT ids -->
      <xs:element name="SP-block_extra-acc" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SP-block_extra-acc_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- seq known to start with Met -->
      <xs:element name="SP-block_imeth" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- plasmid names carrying gene -->
      <xs:element name="SP-block_plasnm" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SP-block_plasnm_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- xref to other sequences -->
      <xs:element name="SP-block_seqref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- xref to non-sequence dbases -->
      <xs:element name="SP-block_dbref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- keywords -->
      <xs:element name="SP-block_keywords" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SP-block_keywords_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- creation date -->
      <xs:element name="SP-block_created" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- sequence update -->
      <xs:element name="SP-block_sequpd" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- annotation update -->
      <xs:element name="SP-block_annotupd" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:element name="Pub">
  <xs:complexType>
    <xs:choice>
<!-- general or generic unparsed -->
      <xs:element name="Pub_gen">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-gen"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- submission -->
      <xs:element name="Pub_sub">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-sub"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub_medline">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Medline-entry"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- medline uid -->
      <xs:element name="Pub_muid" type="xs:integer"/>
      <xs:element name="Pub_article">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-art"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub_journal">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-jour"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub_book">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-book"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- proceedings of a meeting -->
      <xs:element name="Pub_proc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-proc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub_patent">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-pat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- identify a patent -->
      <xs:element name="Pub_pat-id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Id-pat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- manuscript, thesis, or letter -->
      <xs:element name="Pub_man">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-let"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- to cite a variety of ways -->
      <xs:element name="Pub_equiv">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Pub-equiv"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- PubMedId -->
      <xs:element name="Pub_pmid">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubMedId"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- equivalent identifiers for same citation -->
<xs:element name="Pub-equiv">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Pub"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Pub-set">
  <xs:complexType>
    <xs:choice>
      <xs:element name="Pub-set_pub">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Pub"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub-set_medline">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Medline-entry"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub-set_article">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cit-art"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub-set_journal">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cit-jour"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub-set_book">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cit-book"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- proceedings of a meeting -->
      <xs:element name="Pub-set_proc">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cit-proc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Pub-set_patent">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cit-pat"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>


<xs:element name="PRF-block">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="PRF-block_extra-src" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PRF-ExtraSrc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PRF-block_keywords" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="PRF-block_keywords_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PRF-ExtraSrc">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="PRF-ExtraSrc_host" type="xs:string" minOccurs="0"/>
      <xs:element name="PRF-ExtraSrc_part" type="xs:string" minOccurs="0"/>
      <xs:element name="PRF-ExtraSrc_state" type="xs:string" minOccurs="0"/>
      <xs:element name="PRF-ExtraSrc_strain" type="xs:string" minOccurs="0"/>
      <xs:element name="PRF-ExtraSrc_taxon" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PIR-block">
  <xs:complexType>
    <xs:sequence>
<!-- had punctuation in sequence ? -->
      <xs:element name="PIR-block_had-punct" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="PIR-block_host" type="xs:string" minOccurs="0"/>
<!-- source line -->
      <xs:element name="PIR-block_source" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_summary" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_genetic" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_includes" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_placement" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_superfamily" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_keywords" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="PIR-block_keywords_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PIR-block_cross-reference" type="xs:string" minOccurs="0"/>
      <xs:element name="PIR-block_date" type="xs:string" minOccurs="0"/>
<!-- seq with punctuation -->
      <xs:element name="PIR-block_seq-raw" type="xs:string" minOccurs="0"/>
<!-- xref to other sequences -->
      <xs:element name="PIR-block_seqref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:element name="Seq-graph">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-graph_title" type="xs:string" minOccurs="0"/>
      <xs:element name="Seq-graph_comment" type="xs:string" minOccurs="0"/>
<!-- region this applies to -->
      <xs:element name="Seq-graph_loc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- title for x-axis -->
      <xs:element name="Seq-graph_title-x" type="xs:string" minOccurs="0"/>
      <xs:element name="Seq-graph_title-y" type="xs:string" minOccurs="0"/>
<!-- compression (residues/value) -->
      <xs:element name="Seq-graph_comp" type="xs:integer" minOccurs="0"/>
<!-- for scaling values -->
      <xs:element name="Seq-graph_a" type="xs:double" minOccurs="0"/>
<!-- display = (a x value) + b -->
      <xs:element name="Seq-graph_b" type="xs:double" minOccurs="0"/>
<!-- number of values in graph -->
      <xs:element name="Seq-graph_numval" type="xs:integer"/>
      <xs:element name="Seq-graph_graph">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Seq-graph_graph_real">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Real-graph"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-graph_graph_int">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Int-graph"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-graph_graph_byte">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Byte-graph"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Real-graph">
  <xs:complexType>
    <xs:sequence>
<!-- top of graph -->
      <xs:element name="Real-graph_max" type="xs:double"/>
<!-- bottom of graph -->
      <xs:element name="Real-graph_min" type="xs:double"/>
<!-- value to draw axis on -->
      <xs:element name="Real-graph_axis" type="xs:double"/>
      <xs:element name="Real-graph_values">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Real-graph_values_E" type="xs:double"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Int-graph">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Int-graph_max" type="xs:integer"/>
      <xs:element name="Int-graph_min" type="xs:integer"/>
      <xs:element name="Int-graph_axis" type="xs:integer"/>
      <xs:element name="Int-graph_values">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Int-graph_values_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- integer from 0-255 -->
<xs:element name="Byte-graph">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Byte-graph_max" type="xs:integer"/>
      <xs:element name="Byte-graph_min" type="xs:integer"/>
      <xs:element name="Byte-graph_axis" type="xs:integer"/>
      <xs:element name="Byte-graph_values" type="xs:hexBinary"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="SeqTable-column-info">
  <xs:complexType>
    <xs:sequence>
<!-- user friendly column name, can be skipped -->
      <xs:element name="SeqTable-column-info_title" type="xs:string" minOccurs="0"/>
      <xs:element name="SeqTable-column-info_field-id" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    location	-  location as Seq-loc
    location-id	-  location Seq-id
    location-gi	-  gi
    location-from	-  interval from
    location-to	-  interval to
    location-strand	-  location strand
    product	-  product as Seq-loc
    product-id	-  product Seq-id
    product-gi	-  product gi
    product-from	-  product interval from
    product-to	-  product interval to
    product-strand	-  product strand
    id-local	-  main feature fields
         id.local.id
    xref-id-local	-  xref.id.local.id
    ext	-  field-name must be "E.xxx", see below
    qual	-  field-name must be "Q.xxx", see below
    dbxref	-  field-name must be "D.xxx", see below
    data-imp-key	-  various data fields
    ext-type	-  extra fields, see also special values for str below
-->
                    <xs:enumeration value="location" ncbi:intvalue="0"/>
                    <xs:enumeration value="location-id" ncbi:intvalue="1"/>
                    <xs:enumeration value="location-gi" ncbi:intvalue="2"/>
                    <xs:enumeration value="location-from" ncbi:intvalue="3"/>
                    <xs:enumeration value="location-to" ncbi:intvalue="4"/>
                    <xs:enumeration value="location-strand" ncbi:intvalue="5"/>
                    <xs:enumeration value="location-fuzz-from-lim" ncbi:intvalue="6"/>
                    <xs:enumeration value="location-fuzz-to-lim" ncbi:intvalue="7"/>
                    <xs:enumeration value="product" ncbi:intvalue="10"/>
                    <xs:enumeration value="product-id" ncbi:intvalue="11"/>
                    <xs:enumeration value="product-gi" ncbi:intvalue="12"/>
                    <xs:enumeration value="product-from" ncbi:intvalue="13"/>
                    <xs:enumeration value="product-to" ncbi:intvalue="14"/>
                    <xs:enumeration value="product-strand" ncbi:intvalue="15"/>
                    <xs:enumeration value="product-fuzz-from-lim" ncbi:intvalue="16"/>
                    <xs:enumeration value="product-fuzz-to-lim" ncbi:intvalue="17"/>
                    <xs:enumeration value="id-local" ncbi:intvalue="20"/>
                    <xs:enumeration value="xref-id-local" ncbi:intvalue="21"/>
                    <xs:enumeration value="partial" ncbi:intvalue="22"/>
                    <xs:enumeration value="comment" ncbi:intvalue="23"/>
                    <xs:enumeration value="title" ncbi:intvalue="24"/>
                    <xs:enumeration value="ext" ncbi:intvalue="25"/>
                    <xs:enumeration value="qual" ncbi:intvalue="26"/>
                    <xs:enumeration value="dbxref" ncbi:intvalue="27"/>
                    <xs:enumeration value="data-imp-key" ncbi:intvalue="30"/>
                    <xs:enumeration value="data-region" ncbi:intvalue="31"/>
                    <xs:enumeration value="data-cdregion-frame" ncbi:intvalue="32"/>
                    <xs:enumeration value="ext-type" ncbi:intvalue="40"/>
                    <xs:enumeration value="qual-qual" ncbi:intvalue="41"/>
                    <xs:enumeration value="qual-val" ncbi:intvalue="42"/>
                    <xs:enumeration value="dbxref-db" ncbi:intvalue="43"/>
                    <xs:enumeration value="dbxref-tag" ncbi:intvalue="44"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!--
 any column can be identified by ASN.1 text locator string
 with omitted object type.
 examples:
   "data.gene.locus" for Seq-feat.data.gene.locus
   "data.imp.key" for Seq-feat.data.imp.key
   "qual.qual"
    - Seq-feat.qual is SEQUENCE so several columns are allowed
      see also "Q.xxx" special value for shorter qual representation
   "ext.type.str"
   "ext.data.label.str"
   "ext.data.data.int"
      see also "E.xxx" special value for shorter ext representation
 special values start with capital letter:
   "E.xxx" - ext.data.label.str = xxx, ext.data.data = data
    - Seq-feat.ext.data is SEQUENCE so several columns are allowed
   "Q.xxx" - qual.qual = xxx, qual.val = data
    - Seq-feat.qual is SEQUENCE so several columns are allowed
   "D.xxx" - dbxref.id = xxx, dbxref.tag = data
    - Seq-feat.dbxref is SET so several columns are allowed
-->
      <xs:element name="SeqTable-column-info_field-name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="CommonString-table">
  <xs:complexType>
    <xs:sequence>
<!-- set of possible values -->
      <xs:element name="CommonString-table_strings">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="CommonString-table_strings_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- indexes of values -->
      <xs:element name="CommonString-table_indexes">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="CommonString-table_indexes_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="CommonBytes-table">
  <xs:complexType>
    <xs:sequence>
<!-- set of possible values -->
      <xs:element name="CommonBytes-table_bytes">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="CommonBytes-table_bytes_E" type="xs:hexBinary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- indexes of values -->
      <xs:element name="CommonBytes-table_indexes">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="CommonBytes-table_indexes_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="SeqTable-multi-data">
  <xs:complexType>
    <xs:choice>
<!-- a set of integers, one per row -->
      <xs:element name="SeqTable-multi-data_int">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SeqTable-multi-data_int_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a set of reals, one per row -->
      <xs:element name="SeqTable-multi-data_real">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SeqTable-multi-data_real_E" type="xs:double"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a set of strings, one per row -->
      <xs:element name="SeqTable-multi-data_string">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SeqTable-multi-data_string_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a set of byte arrays, one per row -->
      <xs:element name="SeqTable-multi-data_bytes">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SeqTable-multi-data_bytes_E" type="xs:hexBinary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a set of string with small set of possible values -->
      <xs:element name="SeqTable-multi-data_common-string">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="CommonString-table"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- a set of byte arrays with small set of possible values -->
      <xs:element name="SeqTable-multi-data_common-bytes">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="CommonBytes-table"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 a set of bits, one per row
 this uses bm::bvector<> as its storage mechanism
-->
      <xs:element name="SeqTable-multi-data_bit" type="xs:hexBinary"/>
<!-- a set of locations, one per row -->
      <xs:element name="SeqTable-multi-data_loc">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqTable-multi-data_id">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqTable-multi-data_interval">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-interval"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="SeqTable-single-data">
  <xs:complexType>
    <xs:choice>
<!-- integer -->
      <xs:element name="SeqTable-single-data_int" type="xs:integer"/>
<!-- real -->
      <xs:element name="SeqTable-single-data_real" type="xs:double"/>
<!-- string -->
      <xs:element name="SeqTable-single-data_string" type="xs:string"/>
<!-- byte array -->
      <xs:element name="SeqTable-single-data_bytes" type="xs:hexBinary"/>
<!-- bit -->
      <xs:element name="SeqTable-single-data_bit">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- location -->
      <xs:element name="SeqTable-single-data_loc">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqTable-single-data_id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="SeqTable-single-data_interval">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-interval"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="SeqTable-sparse-index">
  <xs:complexType>
    <xs:choice>
<!-- indexed of rows with values -->
      <xs:element name="SeqTable-sparse-index_indexes">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="SeqTable-sparse-index_indexes_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- bitset of rows with values -->
      <xs:element name="SeqTable-sparse-index_bit-set" type="xs:hexBinary"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="SeqTable-column">
  <xs:complexType>
    <xs:sequence>
<!--
 column description or reference to previously defined info
 information about data
-->
      <xs:element name="SeqTable-column_header">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqTable-column-info"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- row data -->
      <xs:element name="SeqTable-column_data" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqTable-multi-data"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- in case not all rows contain data this field will contain sparse info -->
      <xs:element name="SeqTable-column_sparse" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqTable-sparse-index"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- default value for sparse table, or if row data is too short -->
      <xs:element name="SeqTable-column_default" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqTable-single-data"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- single value for indexes not listed in sparse table -->
      <xs:element name="SeqTable-column_sparse-other" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="SeqTable-single-data"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-table">
  <xs:complexType>
    <xs:sequence>
<!-- type of features in this table, equal to Seq-feat.data variant index -->
      <xs:element name="Seq-table_feat-type" type="xs:integer"/>
<!-- subtype of features in this table, defined in header SeqFeatData.hpp -->
      <xs:element name="Seq-table_feat-subtype" type="xs:integer" minOccurs="0"/>
<!-- number of rows -->
      <xs:element name="Seq-table_num-rows" type="xs:integer"/>
<!-- data in columns -->
      <xs:element name="Seq-table_columns">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="SeqTable-column"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Txinit">
  <xs:complexType>
    <xs:sequence>
<!-- descriptive name of initiation site -->
      <xs:element name="Txinit_name" type="xs:string"/>
<!-- synonyms -->
      <xs:element name="Txinit_syn" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Txinit_syn_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- gene(s) transcribed -->
      <xs:element name="Txinit_gene" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Gene-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- protein(s) produced -->
      <xs:element name="Txinit_protein" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Prot-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- rna(s) produced -->
      <xs:element name="Txinit_rna" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Txinit_rna_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- tissue/time of expression -->
      <xs:element name="Txinit_expression" type="xs:string" minOccurs="0"/>
      <xs:element name="Txinit_txsystem">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    pol1	-  eukaryotic Pol I
    pol2	-  eukaryotic Pol II
    pol3	-  eukaryotic Pol III
    rna	-  RNA replicase
-->
                <xs:enumeration value="unknown"/>
                <xs:enumeration value="pol1"/>
                <xs:enumeration value="pol2"/>
                <xs:enumeration value="pol3"/>
                <xs:enumeration value="bacterial"/>
                <xs:enumeration value="viral"/>
                <xs:enumeration value="rna"/>
                <xs:enumeration value="organelle"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- modifiers on txsystem -->
      <xs:element name="Txinit_txdescr" type="xs:string" minOccurs="0"/>
<!-- organism supplying transcription apparatus -->
      <xs:element name="Txinit_txorg" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Org-ref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- mapping precise or approx -->
      <xs:element name="Txinit_mapping-precise" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- does Seq-loc reflect mapping -->
      <xs:element name="Txinit_location-accurate" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Txinit_inittype" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="unknown"/>
                <xs:enumeration value="single"/>
                <xs:enumeration value="multiple"/>
                <xs:enumeration value="region"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Txinit_evidence" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Tx-evidence"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Tx-evidence">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Tx-evidence_exp-code">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    rna-seq	-  direct RNA sequencing
    rna-size	-  RNA length measurement
    np-map	-  nuclease protection mapping with homologous sequence ladder
    np-size	-  nuclease protected fragment length measurement
    pe-seq	-  dideoxy RNA sequencing 
    cDNA-seq	-  full-length cDNA sequencing
    pe-map	-  primer extension mapping with homologous sequence ladder    
    pe-size	-  primer extension product length measurement
    pseudo-seq	-  full-length processed pseudogene sequencing
    rev-pe-map	-  see NOTE (1) below
-->
                <xs:enumeration value="unknown"/>
                <xs:enumeration value="rna-seq"/>
                <xs:enumeration value="rna-size"/>
                <xs:enumeration value="np-map"/>
                <xs:enumeration value="np-size"/>
                <xs:enumeration value="pe-seq"/>
                <xs:enumeration value="cDNA-seq"/>
                <xs:enumeration value="pe-map"/>
                <xs:enumeration value="pe-size"/>
                <xs:enumeration value="pseudo-seq"/>
                <xs:enumeration value="rev-pe-map"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Tx-evidence_expression-system" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="physiological">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="unknown"/>
                <xs:enumeration value="physiological"/>
                <xs:enumeration value="in-vitro"/>
                <xs:enumeration value="oocyte"/>
                <xs:enumeration value="transfection"/>
                <xs:enumeration value="transgenic"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Tx-evidence_low-prec-data" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- experiment actually done on -->
      <xs:element name="Tx-evidence_from-homolog" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element><!--
  close homolog
 NOTE (1) length measurement of a reverse direction primer-extension
          product (blocked  by  RNA  5'end)  by  comparison with
          homologous sequence ladder (J. Mol. Biol. 199, 587)
-->


<xs:element name="Prot-ref">
  <xs:complexType>
    <xs:sequence>
<!-- protein name -->
      <xs:element name="Prot-ref_name" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Prot-ref_name_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- description (instead of name) -->
      <xs:element name="Prot-ref_desc" type="xs:string" minOccurs="0"/>
<!-- E.C. number(s) -->
      <xs:element name="Prot-ref_ec" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Prot-ref_ec_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- activities -->
      <xs:element name="Prot-ref_activity" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Prot-ref_activity_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- ids in other dbases -->
      <xs:element name="Prot-ref_db" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Prot-ref_processed" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="not-set">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="preprotein"/>
                <xs:enumeration value="mature"/>
                <xs:enumeration value="signal-peptide"/>
                <xs:enumeration value="transit-peptide"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="EMBL-dbname">
  <xs:complexType>
    <xs:choice>
      <xs:element name="EMBL-dbname_code">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="embl"/>
                <xs:enumeration value="genbank"/>
                <xs:enumeration value="ddbj"/>
                <xs:enumeration value="geninfo"/>
                <xs:enumeration value="medline"/>
                <xs:enumeration value="swissprot"/>
                <xs:enumeration value="pir"/>
                <xs:enumeration value="pdb"/>
                <xs:enumeration value="epd"/>
                <xs:enumeration value="ecd"/>
                <xs:enumeration value="tfd"/>
                <xs:enumeration value="flybase"/>
                <xs:enumeration value="prosite"/>
                <xs:enumeration value="enzyme"/>
                <xs:enumeration value="mim"/>
                <xs:enumeration value="ecoseq"/>
                <xs:enumeration value="hiv"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-dbname_name" type="xs:string"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<xs:element name="EMBL-xref">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="EMBL-xref_dbname">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="EMBL-dbname"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-xref_id">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="EMBL-block">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="EMBL-block_class" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="standard">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="standard"/>
                <xs:enumeration value="unannotated"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-block_div" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="fun"/>
                <xs:enumeration value="inv"/>
                <xs:enumeration value="mam"/>
                <xs:enumeration value="org"/>
                <xs:enumeration value="phg"/>
                <xs:enumeration value="pln"/>
                <xs:enumeration value="pri"/>
                <xs:enumeration value="pro"/>
                <xs:enumeration value="rod"/>
                <xs:enumeration value="syn"/>
                <xs:enumeration value="una"/>
                <xs:enumeration value="vrl"/>
                <xs:enumeration value="vrt"/>
                <xs:enumeration value="pat"/>
                <xs:enumeration value="est"/>
                <xs:enumeration value="sts"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-block_creation-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-block_update-date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-block_extra-acc" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="EMBL-block_extra-acc_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-block_keywords" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="EMBL-block_keywords_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="EMBL-block_xref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="EMBL-xref"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-align-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Seq-align"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Seq-align">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Seq-align_type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    diags	-  unbroken, but not ordered, diagonals
    partial	-  mapping pieces together
    disc	-  discontinuous alignment
-->
                <xs:enumeration value="not-set"/>
                <xs:enumeration value="global"/>
                <xs:enumeration value="diags"/>
                <xs:enumeration value="partial"/>
                <xs:enumeration value="disc"/>
                <xs:enumeration value="other"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- dimensionality -->
      <xs:element name="Seq-align_dim" type="xs:integer" minOccurs="0"/>
<!-- for whole alignment -->
      <xs:element name="Seq-align_score" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Seq-align_segs">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Seq-align_segs_dendiag">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Dense-diag"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-align_segs_denseg">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Dense-seg"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-align_segs_std">
              <xs:complexType>
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                  <xs:element ref="Std-seg"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-align_segs_packed">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Packed-seg"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-align_segs_disc">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Seq-align-set"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-align_segs_spliced">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Spliced-seg"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="Seq-align_segs_sparse">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="Sparse-seg"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
<!--
 regions of sequence over which align
  was computed
-->
      <xs:element name="Seq-align_bounds" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- alignment id -->
      <xs:element name="Seq-align_id" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--extra info -->
      <xs:element name="Seq-align_ext" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- for (multiway) diagonals -->
<xs:element name="Dense-diag">
  <xs:complexType>
    <xs:sequence>
<!-- dimensionality -->
      <xs:element name="Dense-diag_dim" type="xs:integer" default="2"/>
<!-- sequences in order -->
      <xs:element name="Dense-diag_ids">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- start OFFSETS in ids order -->
      <xs:element name="Dense-diag_starts">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Dense-diag_starts_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- len of aligned segments -->
      <xs:element name="Dense-diag_len" type="xs:integer"/>
      <xs:element name="Dense-diag_strands" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Dense-diag_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Dense-seg: the densist packing for sequence alignments only.
            a start of -1 indicates a gap for that sequence of
            length lens.

 id=100  AAGGCCTTTTAGAGATGATGATGATGATGA
 id=200  AAGGCCTTTTAG.......GATGATGATGA
 id=300  ....CCTTTTAGAGATGATGAT....ATGA

 dim = 3, numseg = 6, ids = { 100, 200, 300 }
 starts = { 0,0,-1, 4,4,0, 12,-1,8, 19,12,15, 22,15,-1, 26,19,18 }
 lens = { 4, 8, 7, 3, 4, 4 }

 for (multiway) global or partial alignments
-->
<xs:element name="Dense-seg">
  <xs:complexType>
    <xs:sequence>
<!-- dimensionality -->
      <xs:element name="Dense-seg_dim" type="xs:integer" default="2"/>
<!-- number of segments here -->
      <xs:element name="Dense-seg_numseg" type="xs:integer"/>
<!-- sequences in order -->
      <xs:element name="Dense-seg_ids">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- start OFFSETS in ids order within segs -->
      <xs:element name="Dense-seg_starts">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Dense-seg_starts_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- lengths in ids order within segs -->
      <xs:element name="Dense-seg_lens">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Dense-seg_lens_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Dense-seg_strands" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- score for each seg -->
      <xs:element name="Dense-seg_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- for (multiway) global or partial alignments -->
<xs:element name="Packed-seg">
  <xs:complexType>
    <xs:sequence>
<!-- dimensionality -->
      <xs:element name="Packed-seg_dim" type="xs:integer" default="2"/>
<!-- number of segments here -->
      <xs:element name="Packed-seg_numseg" type="xs:integer"/>
<!-- sequences in order -->
      <xs:element name="Packed-seg_ids">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- start OFFSETS in ids order for whole alignment -->
      <xs:element name="Packed-seg_starts">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Packed-seg_starts_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--
 Boolean if each sequence present or absent in
   each segment
-->
      <xs:element name="Packed-seg_present" type="xs:hexBinary"/>
<!-- length of each segment -->
      <xs:element name="Packed-seg_lens">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Packed-seg_lens_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Packed-seg_strands" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- score for each segment -->
      <xs:element name="Packed-seg_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Std-seg">
  <xs:complexType>
    <xs:sequence>
<!-- dimensionality -->
      <xs:element name="Std-seg_dim" type="xs:integer" default="2"/>
      <xs:element name="Std-seg_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Std-seg_loc">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Seq-loc"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Std-seg_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Spliced-seg">
  <xs:complexType>
    <xs:sequence>
<!-- product is either protein or transcript (cDNA) -->
      <xs:element name="Spliced-seg_product-id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Spliced-seg_genomic-id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- should be 'plus' or 'minus' -->
      <xs:element name="Spliced-seg_product-strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Spliced-seg_genomic-strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Spliced-seg_product-type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="transcript"/>
                <xs:enumeration value="protein"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!--
 set of segments involved
 each segment corresponds to one exon
 exons are always in biological order
-->
      <xs:element name="Spliced-seg_exons">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Spliced-exon"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- optional poly(A) tail -->
      <xs:element name="Spliced-seg_poly-a" type="xs:integer" minOccurs="0"/>
<!--
 length of the product, in bases/residues
 from this, a 3' unaligned length can be extracted; this also captures
 the case in which a protein aligns leaving a partial codon alignment
 at the 3' end
-->
      <xs:element name="Spliced-seg_product-length" type="xs:integer" minOccurs="0"/>
<!--
 alignment descriptors / modifiers
 this provides us a set for extension
-->
      <xs:element name="Spliced-seg_modifiers" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Spliced-seg-modifier"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Spliced-seg-modifier">
  <xs:complexType>
    <xs:choice>
<!--
 protein aligns from the start and the first codon 
 on both product and genomic is start codon
-->
      <xs:element name="Spliced-seg-modifier_start-codon-found">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!--
 protein aligns to it's end and there is stop codon 
 on the genomic right after the alignment
-->
      <xs:element name="Spliced-seg-modifier_stop-codon-found">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!--
 complete or partial exon
 two consecutive Spliced-exons may belong to one exon
-->
<xs:element name="Spliced-exon">
  <xs:complexType>
    <xs:sequence>
<!-- product-end >= product-start -->
      <xs:element name="Spliced-exon_product-start">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Product-pos"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Spliced-exon_product-end">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Product-pos"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- genomic-end >= genomic-start -->
      <xs:element name="Spliced-exon_genomic-start" type="xs:integer"/>
      <xs:element name="Spliced-exon_genomic-end" type="xs:integer"/>
<!-- product is either protein or transcript (cDNA) -->
      <xs:element name="Spliced-exon_product-id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Spliced-exon_genomic-id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- should be 'plus' or 'minus' -->
      <xs:element name="Spliced-exon_product-strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- genomic-strand represents the strand of translation -->
      <xs:element name="Spliced-exon_genomic-strand" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- basic seqments always are in biologic order -->
      <xs:element name="Spliced-exon_parts" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Spliced-exon-chunk"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- scores for this exon -->
      <xs:element name="Spliced-exon_scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Score-set"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- splice sites -->
      <xs:element name="Spliced-exon_acceptor-before-exon" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Splice-site"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Spliced-exon_donor-after-exon" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Splice-site"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- flag: is this exon complete or partial? -->
      <xs:element name="Spliced-exon_partial" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!--extra info -->
      <xs:element name="Spliced-exon_ext" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="User-object"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Product-pos">
  <xs:complexType>
    <xs:choice>
      <xs:element name="Product-pos_nucpos" type="xs:integer"/>
      <xs:element name="Product-pos_protpos">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Prot-pos"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- codon based position on protein (1/3 of aminoacid) -->
<xs:element name="Prot-pos">
  <xs:complexType>
    <xs:sequence>
<!-- standard protein position -->
      <xs:element name="Prot-pos_amin" type="xs:integer"/>
<!--
 0, 1, 2, or 3 as for Cdregion
 0 = not set
 1, 2, 3 = actual frame
-->
      <xs:element name="Prot-pos_frame" type="xs:integer" default="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 Spliced-exon-chunk: piece of an exon
 lengths are given in nucleotide bases (1/3 of aminoacid when product is a
 protein)
-->
<xs:element name="Spliced-exon-chunk">
  <xs:complexType>
    <xs:choice>
<!-- both sequences represented, product and genomic sequences match -->
      <xs:element name="Spliced-exon-chunk_match" type="xs:integer"/>
<!-- both sequences represented, product and genomic sequences do not match -->
      <xs:element name="Spliced-exon-chunk_mismatch" type="xs:integer"/>
<!--
 both sequences are represented, there is sufficient similarity 
 between product and genomic sequences. Can be used to replace stretches
 of matches and mismatches, mostly for protein to genomic where 
 definition of match or mismatch depends on translation table
-->
      <xs:element name="Spliced-exon-chunk_diag" type="xs:integer"/>
<!-- insertion in product sequence (i.e. gap in the genomic sequence) -->
      <xs:element name="Spliced-exon-chunk_product-ins" type="xs:integer"/>
<!-- insertion in genomic sequence (i.e. gap in the product sequence) -->
      <xs:element name="Spliced-exon-chunk_genomic-ins" type="xs:integer"/>
    </xs:choice>
  </xs:complexType>
</xs:element>

<!-- site involved in splice -->
<xs:element name="Splice-site">
  <xs:complexType>
    <xs:sequence>
<!--
 typically two bases in the intronic region, always
 in IUPAC format
-->
      <xs:element name="Splice-site_bases" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!--
 ==========================================================================

 Sparse-seg follows the semantics of dense-seg and is more optimal for
 representing sparse multiple alignments

 ==========================================================================
-->
<xs:element name="Sparse-seg">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Sparse-seg_master-id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- pairwise alignments constituting this multiple alignment -->
      <xs:element name="Sparse-seg_rows">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Sparse-align"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- per-row scores -->
      <xs:element name="Sparse-seg_row-scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- index of extra items -->
      <xs:element name="Sparse-seg_ext" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Sparse-seg-ext"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Sparse-align">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Sparse-align_first-id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Sparse-align_second-id">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Seq-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--number of segments -->
      <xs:element name="Sparse-align_numseg" type="xs:integer"/>
<!--starts on the first sequence [numseg] -->
      <xs:element name="Sparse-align_first-starts">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Sparse-align_first-starts_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--starts on the second sequence [numseg] -->
      <xs:element name="Sparse-align_second-starts">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Sparse-align_second-starts_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!--lengths of segments [numseg] -->
      <xs:element name="Sparse-align_lens">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Sparse-align_lens_E" type="xs:integer"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Sparse-align_second-strands" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Na-strand"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- per-segment scores -->
      <xs:element name="Sparse-align_seg-scores" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Score"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Sparse-seg-ext">
  <xs:complexType>
    <xs:sequence>
<!--
seg-ext SET OF {
    index INTEGER,
    data User-field
 }
-->
      <xs:element name="Sparse-seg-ext_index" type="xs:integer"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- use of Score is discouraged for external ASN.1 specifications -->
<xs:element name="Score">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Score_id" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Object-id"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Score_value">
        <xs:complexType>
          <xs:choice>
            <xs:element name="Score_value_real" type="xs:double"/>
            <xs:element name="Score_value_int" type="xs:integer"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- use of Score-set is encouraged for external ASN.1 specifications -->
<xs:element name="Score-set">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="Score"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PDB-block">
  <xs:complexType>
    <xs:sequence>
<!-- deposition date  month,year -->
      <xs:element name="PDB-block_deposition">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PDB-block_class" type="xs:string"/>
      <xs:element name="PDB-block_compound">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="PDB-block_compound_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="PDB-block_source">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="PDB-block_source_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- present if NOT X-ray diffraction -->
      <xs:element name="PDB-block_exp-method" type="xs:string" minOccurs="0"/>
<!-- replacement history -->
      <xs:element name="PDB-block_replace" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PDB-replace"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="PDB-replace">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="PDB-replace_date">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- entry ids replace by this one -->
      <xs:element name="PDB-replace_ids">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="PDB-replace_ids_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>


<xs:element name="Gene-ref">
  <xs:complexType>
    <xs:sequence>
<!-- Official gene symbol -->
      <xs:element name="Gene-ref_locus" type="xs:string" minOccurs="0"/>
<!-- Official allele designation -->
      <xs:element name="Gene-ref_allele" type="xs:string" minOccurs="0"/>
<!-- descriptive name -->
      <xs:element name="Gene-ref_desc" type="xs:string" minOccurs="0"/>
<!-- descriptive map location -->
      <xs:element name="Gene-ref_maploc" type="xs:string" minOccurs="0"/>
<!-- pseudogene -->
      <xs:element name="Gene-ref_pseudo" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- ids in other dbases -->
      <xs:element name="Gene-ref_db" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- synonyms for locus -->
      <xs:element name="Gene-ref_syn" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Gene-ref_syn_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- systematic gene name (e.g., MI0001, ORF0069) -->
      <xs:element name="Gene-ref_locus-tag" type="xs:string" minOccurs="0"/>
      <xs:element name="Gene-ref_formal-name" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Gene-nomenclature"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Gene-nomenclature">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Gene-nomenclature_status">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="unknown"/>
                <xs:enumeration value="official"/>
                <xs:enumeration value="interim"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Gene-nomenclature_symbol" type="xs:string" minOccurs="0"/>
      <xs:element name="Gene-nomenclature_name" type="xs:string" minOccurs="0"/>
      <xs:element name="Gene-nomenclature_source" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Org-ref">
  <xs:complexType>
    <xs:sequence>
<!-- preferred formal name -->
      <xs:element name="Org-ref_taxname" type="xs:string" minOccurs="0"/>
<!-- common name -->
      <xs:element name="Org-ref_common" type="xs:string" minOccurs="0"/>
<!-- unstructured modifiers -->
      <xs:element name="Org-ref_mod" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Org-ref_mod_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- ids in taxonomic or culture dbases -->
      <xs:element name="Org-ref_db" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Dbtag"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- synonyms for taxname or common -->
      <xs:element name="Org-ref_syn" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Org-ref_syn_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Org-ref_orgname" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="OrgName"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="OrgName">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="OrgName_name" minOccurs="0">
        <xs:complexType>
          <xs:choice>
<!-- genus/species type name -->
            <xs:element name="OrgName_name_binomial">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="BinomialOrgName"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- virus names are different -->
            <xs:element name="OrgName_name_virus" type="xs:string"/>
<!-- hybrid between organisms -->
            <xs:element name="OrgName_name_hybrid">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="MultiOrgName"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- some hybrids have genus x species name -->
            <xs:element name="OrgName_name_namedhybrid">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="BinomialOrgName"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
<!-- when genus not known -->
            <xs:element name="OrgName_name_partial">
              <xs:complexType>
                <xs:sequence>
                  <xs:element ref="PartialOrgName"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
<!-- attribution of name -->
      <xs:element name="OrgName_attrib" type="xs:string" minOccurs="0"/>
      <xs:element name="OrgName_mod" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="OrgMod"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- lineage with semicolon separators -->
      <xs:element name="OrgName_lineage" type="xs:string" minOccurs="0"/>
<!-- genetic code (see CdRegion) -->
      <xs:element name="OrgName_gcode" type="xs:integer" minOccurs="0"/>
<!-- mitochondrial genetic code -->
      <xs:element name="OrgName_mgcode" type="xs:integer" minOccurs="0"/>
<!-- GenBank division code -->
      <xs:element name="OrgName_div" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="OrgMod">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="OrgMod_subtype">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    dosage	-  chromosome dosage of hybrid
    nat-host	-  natural host of this specimen
    gb-acronym	-  used by taxonomy database
    gb-anamorph	-  used by taxonomy database
    gb-synonym	-  used by taxonomy database
    other	-  ASN5: old-name (254) will be added to next spec
-->
                    <xs:enumeration value="strain" ncbi:intvalue="2"/>
                    <xs:enumeration value="substrain" ncbi:intvalue="3"/>
                    <xs:enumeration value="type" ncbi:intvalue="4"/>
                    <xs:enumeration value="subtype" ncbi:intvalue="5"/>
                    <xs:enumeration value="variety" ncbi:intvalue="6"/>
                    <xs:enumeration value="serotype" ncbi:intvalue="7"/>
                    <xs:enumeration value="serogroup" ncbi:intvalue="8"/>
                    <xs:enumeration value="serovar" ncbi:intvalue="9"/>
                    <xs:enumeration value="cultivar" ncbi:intvalue="10"/>
                    <xs:enumeration value="pathovar" ncbi:intvalue="11"/>
                    <xs:enumeration value="chemovar" ncbi:intvalue="12"/>
                    <xs:enumeration value="biovar" ncbi:intvalue="13"/>
                    <xs:enumeration value="biotype" ncbi:intvalue="14"/>
                    <xs:enumeration value="group" ncbi:intvalue="15"/>
                    <xs:enumeration value="subgroup" ncbi:intvalue="16"/>
                    <xs:enumeration value="isolate" ncbi:intvalue="17"/>
                    <xs:enumeration value="common" ncbi:intvalue="18"/>
                    <xs:enumeration value="acronym" ncbi:intvalue="19"/>
                    <xs:enumeration value="dosage" ncbi:intvalue="20"/>
                    <xs:enumeration value="nat-host" ncbi:intvalue="21"/>
                    <xs:enumeration value="sub-species" ncbi:intvalue="22"/>
                    <xs:enumeration value="specimen-voucher" ncbi:intvalue="23"/>
                    <xs:enumeration value="authority" ncbi:intvalue="24"/>
                    <xs:enumeration value="forma" ncbi:intvalue="25"/>
                    <xs:enumeration value="forma-specialis" ncbi:intvalue="26"/>
                    <xs:enumeration value="ecotype" ncbi:intvalue="27"/>
                    <xs:enumeration value="synonym" ncbi:intvalue="28"/>
                    <xs:enumeration value="anamorph" ncbi:intvalue="29"/>
                    <xs:enumeration value="teleomorph" ncbi:intvalue="30"/>
                    <xs:enumeration value="breed" ncbi:intvalue="31"/>
                    <xs:enumeration value="gb-acronym" ncbi:intvalue="32"/>
                    <xs:enumeration value="gb-anamorph" ncbi:intvalue="33"/>
                    <xs:enumeration value="gb-synonym" ncbi:intvalue="34"/>
                    <xs:enumeration value="culture-collection" ncbi:intvalue="35"/>
                    <xs:enumeration value="bio-material" ncbi:intvalue="36"/>
                    <xs:enumeration value="metagenome-source" ncbi:intvalue="37"/>
                    <xs:enumeration value="old-lineage" ncbi:intvalue="253"/>
                    <xs:enumeration value="old-name" ncbi:intvalue="254"/>
                    <xs:enumeration value="other" ncbi:intvalue="255"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="OrgMod_subname" type="xs:string"/>
<!-- attribution/source of name -->
      <xs:element name="OrgMod_attrib" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="BinomialOrgName">
  <xs:complexType>
    <xs:sequence>
<!-- required -->
      <xs:element name="BinomialOrgName_genus" type="xs:string"/>
<!-- species required if subspecies used -->
      <xs:element name="BinomialOrgName_species" type="xs:string" minOccurs="0"/>
      <xs:element name="BinomialOrgName_subspecies" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- the first will be used to assign division -->
<xs:element name="MultiOrgName">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="OrgName"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- when we don't know the genus -->
<xs:element name="PartialOrgName">
  <xs:complexType>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="TaxElement"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="TaxElement">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="TaxElement_fixed-level">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    other	-  level must be set in string
-->
                    <xs:enumeration value="other" ncbi:intvalue="0"/>
                    <xs:enumeration value="family" ncbi:intvalue="1"/>
                    <xs:enumeration value="order" ncbi:intvalue="2"/>
                    <xs:enumeration value="class" ncbi:intvalue="3"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="TaxElement_level" type="xs:string" minOccurs="0"/>
      <xs:element name="TaxElement_name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Medline-entry">
  <xs:complexType>
    <xs:sequence>
<!-- MEDLINE UID, sometimes not yet available if from PubMed -->
      <xs:element name="Medline-entry_uid" type="xs:integer" minOccurs="0"/>
<!-- Entry Month -->
      <xs:element name="Medline-entry_em">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- article citation -->
      <xs:element name="Medline-entry_cit">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Cit-art"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Medline-entry_abstract" type="xs:string" minOccurs="0"/>
      <xs:element name="Medline-entry_mesh" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Medline-mesh"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Medline-entry_substance" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Medline-rn"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Medline-entry_xref" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Medline-si"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- ID Number (grants, contracts) -->
      <xs:element name="Medline-entry_idnum" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Medline-entry_idnum_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Medline-entry_gene" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Medline-entry_gene_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- MEDLINE records may include the PubMedId -->
      <xs:element name="Medline-entry_pmid" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="PubMedId"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- may show publication types (review, etc) -->
      <xs:element name="Medline-entry_pub-type" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Medline-entry_pub-type_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- additional Medline field types -->
      <xs:element name="Medline-entry_mlfield" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Medline-field"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Medline-entry_status" minOccurs="0">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional" default="medline">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    publisher	-  record as supplied by publisher
    premedline	-  premedline record
-->
                    <xs:enumeration value="publisher" ncbi:intvalue="1"/>
                    <xs:enumeration value="premedline" ncbi:intvalue="2"/>
                    <xs:enumeration value="medline" ncbi:intvalue="3"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Medline-mesh">
  <xs:complexType>
    <xs:sequence>
<!-- TRUE if main point (*) -->
      <xs:element name="Medline-mesh_mp" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- the MeSH term -->
      <xs:element name="Medline-mesh_term" type="xs:string"/>
<!-- qualifiers -->
      <xs:element name="Medline-mesh_qual" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Medline-qual"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Medline-qual">
  <xs:complexType>
    <xs:sequence>
<!-- TRUE if main point -->
      <xs:element name="Medline-qual_mp" minOccurs="0">
        <xs:complexType>
          <xs:attribute name="value" use="optional" default="false">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- the subheading -->
      <xs:element name="Medline-qual_subh" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- medline substance records -->
<xs:element name="Medline-rn">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Medline-rn_type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    cas	-  CAS number
    ec	-  EC number
-->
                <xs:enumeration value="nameonly"/>
                <xs:enumeration value="cas"/>
                <xs:enumeration value="ec"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- CAS or EC number if present -->
      <xs:element name="Medline-rn_cit" type="xs:string" minOccurs="0"/>
<!-- name (always present) -->
      <xs:element name="Medline-rn_name" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- medline cross reference records -->
<xs:element name="Medline-si">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Medline-si_type">
        <xs:complexType>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:string">
<!--
    ddbj	-  DNA Data Bank of Japan
    carbbank	-  Carbohydrate Structure Database
    embl	-  EMBL Data Library
    hdb	-  Hybridoma Data Bank
    genbank	-  GenBank
    hgml	-  Human Gene Map Library
    mim	-  Mendelian Inheritance in Man
    msd	-  Microbial Strains Database
    pdb	-  Protein Data Bank (Brookhaven)
    pir	-  Protein Identification Resource
    prfseqdb	-  Protein Research Foundation (Japan)
    psd	-  Protein Sequence Database (Japan)
    swissprot	-  SwissProt
    gdb	-  Genome Data Base
-->
                <xs:enumeration value="ddbj"/>
                <xs:enumeration value="carbbank"/>
                <xs:enumeration value="embl"/>
                <xs:enumeration value="hdb"/>
                <xs:enumeration value="genbank"/>
                <xs:enumeration value="hgml"/>
                <xs:enumeration value="mim"/>
                <xs:enumeration value="msd"/>
                <xs:enumeration value="pdb"/>
                <xs:enumeration value="pir"/>
                <xs:enumeration value="prfseqdb"/>
                <xs:enumeration value="psd"/>
                <xs:enumeration value="swissprot"/>
                <xs:enumeration value="gdb"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
<!-- the citation/accession number -->
      <xs:element name="Medline-si_cit" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<xs:element name="Medline-field">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="Medline-field_type">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
<!--
    other	-  look in line code
    comment	-  comment line
    erratum	-  retracted, corrected, etc
-->
                    <xs:enumeration value="other" ncbi:intvalue="0"/>
                    <xs:enumeration value="comment" ncbi:intvalue="1"/>
                    <xs:enumeration value="erratum" ncbi:intvalue="2"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
<!-- the text -->
      <xs:element name="Medline-field_str" type="xs:string"/>
<!-- pointers relevant to this text -->
      <xs:element name="Medline-field_ids" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="DocRef"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:element>

<!-- reference to a document -->
<xs:element name="DocRef">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="DocRef_type">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="xs:integer">
              <xs:attribute name="value" use="optional">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="medline" ncbi:intvalue="1"/>
                    <xs:enumeration value="pubmed" ncbi:intvalue="2"/>
                    <xs:enumeration value="ncbigi" ncbi:intvalue="3"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:attribute>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="DocRef_uid" type="xs:integer"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>
<!-- GenBank specific descriptions -->
<xs:element name="GB-block">
  <xs:complexType>
    <xs:sequence>
      <xs:element name="GB-block_extra-accessions" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="GB-block_extra-accessions_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- source line -->
      <xs:element name="GB-block_source" type="xs:string" minOccurs="0"/>
      <xs:element name="GB-block_keywords" minOccurs="0">
        <xs:complexType>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="GB-block_keywords_E" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="GB-block_origin" type="xs:string" minOccurs="0"/>
<!-- OBSOLETE old form Entry Date -->
      <xs:element name="GB-block_date" type="xs:string" minOccurs="0"/>
<!-- replaces date -->
      <xs:element name="GB-block_entry-date" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element ref="Date"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
<!-- GenBank division -->
      <xs:element name="GB-block_div" type="xs:string" minOccurs="0"/>
<!-- continuation line of organism -->
      <xs:element name="GB-block_taxonomy" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:element>


</xs:schema>
