package edu.umn.msi.tropix.storage.cagrid.service.globus;

import edu.umn.msi.tropix.storage.cagrid.service.TropixStorageImpl;

import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements each method in the portType of the service.  Each method call represented
 * in the port type will be then mapped into the unwrapped implementation which the user provides
 * in the TropixStorageImpl class.  This class handles the boxing and unboxing of each method call
 * so that it can be correclty mapped in the unboxed interface that the developer has designed and 
 * has implemented.  Authorization callbacks are automatically made for each method based
 * on each methods authorization requirements.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
@SuppressWarnings("all") public class TropixStorageProviderImpl{
	
	TropixStorageImpl impl;
	
	public TropixStorageProviderImpl() throws RemoteException {
		impl = new TropixStorageImpl();
	}
	

    public edu.umn.msi.tropix.storage.cagrid.stubs.DeleteResponse delete(edu.umn.msi.tropix.storage.cagrid.stubs.DeleteRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.DeleteResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.DeleteResponse();
    boxedResult.setResponse(impl.delete(params.getArg1()));
    return boxedResult;
  }

    public edu.umn.msi.tropix.storage.cagrid.stubs.ExistsResponse exists(edu.umn.msi.tropix.storage.cagrid.stubs.ExistsRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.ExistsResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.ExistsResponse();
    boxedResult.setResponse(impl.exists(params.getArg1()));
    return boxedResult;
  }

    public edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadResponse prepareDownload(edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.PrepareDownloadResponse();
    boxedResult.setTransferServiceContextReference(impl.prepareDownload(params.getArg1()));
    return boxedResult;
  }

    public edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadResponse prepareUpload(edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.PrepareUploadResponse();
    boxedResult.setTransferServiceContextReference(impl.prepareUpload(params.getArg1()));
    return boxedResult;
  }

    public edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadResponse canDownload(edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.CanDownloadResponse();
    boxedResult.setResponse(impl.canDownload(params.getArg1()));
    return boxedResult;
  }

    public edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadResponse canUpload(edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.CanUploadResponse();
    boxedResult.setResponse(impl.canUpload(params.getArg1()));
    return boxedResult;
  }

    public edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteResponse canDelete(edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteRequest params) throws RemoteException {
    edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteResponse boxedResult = new edu.umn.msi.tropix.storage.cagrid.stubs.CanDeleteResponse();
    boxedResult.setResponse(impl.canDelete(params.getArg1()));
    return boxedResult;
  }

}
